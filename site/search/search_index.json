{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Word to Canvas ( word2canvas ) Module What is word2canvas ? A userscript that will create a new Canvas LMS module from a Word document (using some specific Word styles) - see sample w2c.docx for an annotated example. Your content stays in your environment The contents of your Word documents always remain on your computer, your web browser, and eventually as a Module in the Canvas instance you are working with. Why use word2canvas ? Manually creating a complex module using the Canvas web interface can be a touch tedious. Each item must be edited on its individual page. Multiple clicks... Especially if you already have the module content in a Word document and/or you are creating many modules. (e.g. migrating from one LMS to another) The limitations and issues page summarises the current status of word2canvas .","title":"Home"},{"location":"#word-to-canvas-word2canvas-module","text":"","title":"Word to Canvas (word2canvas) Module"},{"location":"#what-is-word2canvas","text":"A userscript that will create a new Canvas LMS module from a Word document (using some specific Word styles) - see sample w2c.docx for an annotated example. Your content stays in your environment The contents of your Word documents always remain on your computer, your web browser, and eventually as a Module in the Canvas instance you are working with.","title":"What is word2canvas?"},{"location":"#why-use-word2canvas","text":"Manually creating a complex module using the Canvas web interface can be a touch tedious. Each item must be edited on its individual page. Multiple clicks... Especially if you already have the module content in a Word document and/or you are creating many modules. (e.g. migrating from one LMS to another) The limitations and issues page summarises the current status of word2canvas .","title":"Why use word2canvas?"},{"location":"create/","text":"Create a word-2-canvas Word document A word-2-canvas Word document uses specific Word styles to achieve different types of changes to a Canvas module. The sample w2c.docx includes those styles is an example of how to use them. For more on Word styles see this resource or search out your own How it works Canvas Modules are collections of items of different types. word-2-canvas allows you to write a Canvas module as a single Word document. Your Word document consists of a sequence of different heading styles. Each heading style represents a single Canvas item. The following illustrate how word-2-canvas converts the sample w2c.docx file into a Canvas module. Word document Canvas module Summary: word-2-canvas styles and their purpose Canvas specific styles The following Word styles direct word-2-canvas to perform Canvas specific actions. e.g. create a new Canvas module with a title matching text in the Title style. word-2-canvas style Purpose Title * The title of the new Canvas module Heading 1 * Name of a new Canvas page Existing Canvas Page Name of a Canvas page already available in the course Canvas Discussion Name of an existing Canvas discussion Canvas SubHeader Name for a new Canvas text (sub) header Canvas File The name (or part of the name) of a file already in the Canvas course's Files Canvas File Link Insert a link to a Canvas file within a page. Apply this style to some text and it assumes that the text is the name of the file that it should link to. Apply this style to a link, then it assumes the link is the name of the file. Canvas Assignment The name (or part of the name) of an assignment already in the Canvas course's Assignments Canvas Quiz The name (or part of the name) of a quiz already in the Canvas course's Quizzes Canvas External Url Add an external link as a module item Canvas Extternal Tool Add an external tool as a module item Canvas Image Define some HTML that contains an <img tag where the img.src is the name of a file already in the Canvas course's Files area . Will attempt to identify a URL for the file and insert it into the img.src Canvas Menu Link Create a link where the \"address\" is the name of an item in the Canvas left hand menu. Will get replaced with the correct URL for the course site * - Standard Word styles. Canvas Quiz only works for Classic Quizzes , not New Quizzes (classic vs. new quizzes](https://it.umn.edu/services-technologies/how-tos/canvas-understand-classic-quizzes-vs-new)) because Canvas does not yet have an API for new Quizzes . General web specific styles The following style(s) direct word-2-canvas to perform general web specific actions. e.g. embed into a Canvas item some specific HTML. word-2-canvas style Purpose embed Identifies text that will be inserted into a Canvas page as HTML. e.g. use it to embed a YouTube video Blackboard migration specific styles The following style(s) directly word-2-canvas to perform actions designed to help migrate content from the Blackboard Learning Management System to Canvas. word-2-canvas style Purpose Blackboard image p Define HTML that includes an <img tag for an image residing in the content collection of a Blackboard course site. Assuming the image has been migrated to the Canvas course's files area, will create an <img tag in a Canvas page with a URL to the image in Canvas Hide Define text that should not be imported into the Canvas module. Typically used to provide Blackboard specific references to aid migration","title":"Create a word-2-canvas Word document"},{"location":"create/#create-a-word-2-canvas-word-document","text":"A word-2-canvas Word document uses specific Word styles to achieve different types of changes to a Canvas module. The sample w2c.docx includes those styles is an example of how to use them. For more on Word styles see this resource or search out your own","title":"Create a word-2-canvas Word document"},{"location":"create/#how-it-works","text":"Canvas Modules are collections of items of different types. word-2-canvas allows you to write a Canvas module as a single Word document. Your Word document consists of a sequence of different heading styles. Each heading style represents a single Canvas item. The following illustrate how word-2-canvas converts the sample w2c.docx file into a Canvas module. Word document Canvas module","title":"How it works"},{"location":"create/#summary-word-2-canvas-styles-and-their-purpose","text":"","title":"Summary: word-2-canvas styles and their purpose"},{"location":"create/#canvas-specific-styles","text":"The following Word styles direct word-2-canvas to perform Canvas specific actions. e.g. create a new Canvas module with a title matching text in the Title style. word-2-canvas style Purpose Title * The title of the new Canvas module Heading 1 * Name of a new Canvas page Existing Canvas Page Name of a Canvas page already available in the course Canvas Discussion Name of an existing Canvas discussion Canvas SubHeader Name for a new Canvas text (sub) header Canvas File The name (or part of the name) of a file already in the Canvas course's Files Canvas File Link Insert a link to a Canvas file within a page. Apply this style to some text and it assumes that the text is the name of the file that it should link to. Apply this style to a link, then it assumes the link is the name of the file. Canvas Assignment The name (or part of the name) of an assignment already in the Canvas course's Assignments Canvas Quiz The name (or part of the name) of a quiz already in the Canvas course's Quizzes Canvas External Url Add an external link as a module item Canvas Extternal Tool Add an external tool as a module item Canvas Image Define some HTML that contains an <img tag where the img.src is the name of a file already in the Canvas course's Files area . Will attempt to identify a URL for the file and insert it into the img.src Canvas Menu Link Create a link where the \"address\" is the name of an item in the Canvas left hand menu. Will get replaced with the correct URL for the course site * - Standard Word styles. Canvas Quiz only works for Classic Quizzes , not New Quizzes (classic vs. new quizzes](https://it.umn.edu/services-technologies/how-tos/canvas-understand-classic-quizzes-vs-new)) because Canvas does not yet have an API for new Quizzes .","title":"Canvas specific styles"},{"location":"create/#general-web-specific-styles","text":"The following style(s) direct word-2-canvas to perform general web specific actions. e.g. embed into a Canvas item some specific HTML. word-2-canvas style Purpose embed Identifies text that will be inserted into a Canvas page as HTML. e.g. use it to embed a YouTube video","title":"General web specific styles"},{"location":"create/#blackboard-migration-specific-styles","text":"The following style(s) directly word-2-canvas to perform actions designed to help migrate content from the Blackboard Learning Management System to Canvas. word-2-canvas style Purpose Blackboard image p Define HTML that includes an <img tag for an image residing in the content collection of a Blackboard course site. Assuming the image has been migrated to the Canvas course's files area, will create an <img tag in a Canvas page with a URL to the image in Canvas Hide Define text that should not be imported into the Canvas module. Typically used to provide Blackboard specific references to aid migration","title":"Blackboard migration specific styles"},{"location":"test/","text":"Test word2canvas After you have installed the word2canvas userscript , use the following to test it. The process below is Prepare pre-requisites View the modules page and word2canvas in action. Use word2canvas to create a new module from the firstTextDocument file 1. Prepare pre-requisites To test word2canvas you will need A browser with the word2canvas userscript installed. A Canvas course site on which you can create Modules. Have downloaded the firstTestDocument.docx file to your computer. 2. View the modules page and word2canvas in action. With word2canvas installed in your browser, go to the Modules page of your Canvas course. Not in Student View . You should see something similar to the following. The new addition is the .docx 2 + Module button to the left of the + Module button in the top right-hand corner. This button has been added by word2canvas . If you don't see this button, there is a problem that needs to diagnosed and remedied 3. Use word2canvas to create a new module Create a new module by clicking the .docx 2 + Module button. This should add the .docx 2 + Canvas Module interface at the top of the page you're viewing. e.g. the following image. Use the Browse button to select the firstTestDocument.docx file you downloaded. Follow the advice shown and your module should be created and you'll end up with something like the following.","title":"Test word2canvas"},{"location":"test/#test-word2canvas","text":"After you have installed the word2canvas userscript , use the following to test it. The process below is Prepare pre-requisites View the modules page and word2canvas in action. Use word2canvas to create a new module from the firstTextDocument file","title":"Test word2canvas"},{"location":"test/#1-prepare-pre-requisites","text":"To test word2canvas you will need A browser with the word2canvas userscript installed. A Canvas course site on which you can create Modules. Have downloaded the firstTestDocument.docx file to your computer.","title":"1. Prepare pre-requisites"},{"location":"test/#2-view-the-modules-page-and-word2canvas-in-action","text":"With word2canvas installed in your browser, go to the Modules page of your Canvas course. Not in Student View . You should see something similar to the following. The new addition is the .docx 2 + Module button to the left of the + Module button in the top right-hand corner. This button has been added by word2canvas . If you don't see this button, there is a problem that needs to diagnosed and remedied","title":"2. View the modules page and word2canvas in action."},{"location":"test/#3-use-word2canvas-to-create-a-new-module","text":"Create a new module by clicking the .docx 2 + Module button. This should add the .docx 2 + Canvas Module interface at the top of the page you're viewing. e.g. the following image. Use the Browse button to select the firstTestDocument.docx file you downloaded. Follow the advice shown and your module should be created and you'll end up with something like the following.","title":"3. Use word2canvas to create a new module"},{"location":"word2html-messages/","text":"Checking and fixing HTML conversion outcomes Background The first step in word2canvas is converting your Word document to HTML. To achieve this, word2canvas uses the Mammoth .docx to HTML converter ; and, a custom style map . After attempting to convert your Word document, word2canvas will display both the Messages and the HTML generated by Mammoth. These are displayed in accordions which can be opened/closed to check the outcomes of the conversion and inform how to fix any issues. Checking the conversion outcomes The following image shows the conversion outcomes of the sample w2c.docx file . The two most common types of checks are Do the Messages include anything of concern? Are there any problems with the generated HTML ? Check the Messages Mammoth messages follow a common format , typically including a type and a message . The type with be either a warning or a error . Warnings tend to mean the conversion happened, but perhaps with unexpected results. As illustrated above the most common warning indicates that the document includes a Word style that is not recognised by Mammoth. Handling unrecognised Word styles There are three ways you can handle a Word style unrecognised by Mammoth Ignore it - generally the text will still appear in the HTML. However, it may have lost some of the intended styling. Remove the style from the Word document - you can search Word documents for specific styles and then choose to apply a different style or to remove the style entirely Add the style to the word2canvas custom map - the custom map is in the word converter model . If you're not comfortable coding, you can request an update of the custom style map via the word2canvas Issues . Handling problems with the generated HTML If the generated HTML does not meet your expectations, the only real solution is to modify the Word document (e.g. change the style used, modify an image etc) and test the conversion again.","title":"Checking and fixing HTML conversion outcomes"},{"location":"word2html-messages/#checking-and-fixing-html-conversion-outcomes","text":"","title":"Checking and fixing HTML conversion outcomes"},{"location":"word2html-messages/#background","text":"The first step in word2canvas is converting your Word document to HTML. To achieve this, word2canvas uses the Mammoth .docx to HTML converter ; and, a custom style map . After attempting to convert your Word document, word2canvas will display both the Messages and the HTML generated by Mammoth. These are displayed in accordions which can be opened/closed to check the outcomes of the conversion and inform how to fix any issues.","title":"Background"},{"location":"word2html-messages/#checking-the-conversion-outcomes","text":"The following image shows the conversion outcomes of the sample w2c.docx file . The two most common types of checks are Do the Messages include anything of concern? Are there any problems with the generated HTML ?","title":"Checking the conversion outcomes"},{"location":"word2html-messages/#check-the-messages","text":"Mammoth messages follow a common format , typically including a type and a message . The type with be either a warning or a error . Warnings tend to mean the conversion happened, but perhaps with unexpected results. As illustrated above the most common warning indicates that the document includes a Word style that is not recognised by Mammoth.","title":"Check the Messages"},{"location":"word2html-messages/#handling-unrecognised-word-styles","text":"There are three ways you can handle a Word style unrecognised by Mammoth Ignore it - generally the text will still appear in the HTML. However, it may have lost some of the intended styling. Remove the style from the Word document - you can search Word documents for specific styles and then choose to apply a different style or to remove the style entirely Add the style to the word2canvas custom map - the custom map is in the word converter model . If you're not comfortable coding, you can request an update of the custom style map via the word2canvas Issues .","title":"Handling unrecognised Word styles"},{"location":"word2html-messages/#handling-problems-with-the-generated-html","text":"If the generated HTML does not meet your expectations, the only real solution is to modify the Word document (e.g. change the style used, modify an image etc) and test the conversion again.","title":"Handling problems with the generated HTML"},{"location":"development/design/","text":"Design As illustrated below, the application has 5 states: Initialised - the \".docx + Module\" button has been added to the Canvas module page. Choose Word - user is able to select the Word document. Check HTML - results of the .docx to HTML conversion is provided for checking. Check Module - the proposed HTML to Canvas Module conversion is provided for checking. Complete - display the results of creating the new module Beyond the tranisitions shown in the image below, there is a cancel transition that returns to the Initialised state from any of the other states. Architecture Controller - state management The c2m_Controller class manages application state and transitions between. The controller is responsible for: Knowing what the different states are. Constants defined in the controller are used as labels to identify the current state. What current state is The currentState property. How to render the different states and perform additional tasks. Achieved by using state specific views. extracting canvas token Views - representation Each state has its own view Data structures Different states are represented using an enum defined in the model source. c2m_initialise c2m_chooseWord c2m_checkHtml c2m_checkModule c2m_c2m_complete Current state is stored in the model model.stage Algorithms Basic operation Model created with stage set to c2m_initialise View passed the model calls render - a big switch statement that then calls stage dependent method: renderInitialise renderChooseWord renderCheckHtml renderCheckModule renderComplete Event handling event handlers are created by the different render functions, including any required click events each click event is a call to the views handleClick method accepting a stage enum handleClick - selects the specific event handler based on the stage enum Example When first run, the view will call renderInitialise , which will - if there's already an add_module button on the page - add the c2m_word_2_module button with onclick ```handleClick(c2m_chooseWord) remove the c2m_dialog div if it exists (i.e. user closed an existing conversion) Canvas API Calls to Canvas API will be placed into models and available as async methods. The caller will use the then functionality to handle the response. probably generating a DOM event as above -- essentially like Mammoth results e.g. get all modules this . canvasModules . getAllModules () . then (() => { // should generate an event console . log ( `c2m_Model -> getAllModules: finished ` ); console . log ( this . canvasModules . allModules ); });","title":"Design"},{"location":"development/design/#design","text":"As illustrated below, the application has 5 states: Initialised - the \".docx + Module\" button has been added to the Canvas module page. Choose Word - user is able to select the Word document. Check HTML - results of the .docx to HTML conversion is provided for checking. Check Module - the proposed HTML to Canvas Module conversion is provided for checking. Complete - display the results of creating the new module Beyond the tranisitions shown in the image below, there is a cancel transition that returns to the Initialised state from any of the other states.","title":"Design"},{"location":"development/design/#architecture","text":"","title":"Architecture"},{"location":"development/design/#controller-state-management","text":"The c2m_Controller class manages application state and transitions between. The controller is responsible for: Knowing what the different states are. Constants defined in the controller are used as labels to identify the current state. What current state is The currentState property. How to render the different states and perform additional tasks. Achieved by using state specific views. extracting canvas token","title":"Controller - state management"},{"location":"development/design/#views-representation","text":"Each state has its own view","title":"Views - representation"},{"location":"development/design/#data-structures","text":"Different states are represented using an enum defined in the model source. c2m_initialise c2m_chooseWord c2m_checkHtml c2m_checkModule c2m_c2m_complete Current state is stored in the model model.stage","title":"Data structures"},{"location":"development/design/#algorithms","text":"Basic operation Model created with stage set to c2m_initialise View passed the model calls render - a big switch statement that then calls stage dependent method: renderInitialise renderChooseWord renderCheckHtml renderCheckModule renderComplete Event handling event handlers are created by the different render functions, including any required click events each click event is a call to the views handleClick method accepting a stage enum handleClick - selects the specific event handler based on the stage enum","title":"Algorithms"},{"location":"development/design/#example","text":"When first run, the view will call renderInitialise , which will - if there's already an add_module button on the page - add the c2m_word_2_module button with onclick ```handleClick(c2m_chooseWord) remove the c2m_dialog div if it exists (i.e. user closed an existing conversion)","title":"Example"},{"location":"development/design/#canvas-api","text":"Calls to Canvas API will be placed into models and available as async methods. The caller will use the then functionality to handle the response. probably generating a DOM event as above -- essentially like Mammoth results e.g. get all modules this . canvasModules . getAllModules () . then (() => { // should generate an event console . log ( `c2m_Model -> getAllModules: finished ` ); console . log ( this . canvasModules . allModules ); });","title":"Canvas API"},{"location":"development/development/","text":"Development word2canvas draws on the work of many others and is an on-going work in progress. How word2canvas is developed is explained on the local development page . The design of word2canvas is explained on the design page . Standing on the shoulders of giants word2canvas uses a range of open source tools, including: mammoth.js for Word to HTML conversion userscript-builder for local development of the word2canvas userscript ...many more to add","title":"Overview"},{"location":"development/development/#development","text":"word2canvas draws on the work of many others and is an on-going work in progress. How word2canvas is developed is explained on the local development page . The design of word2canvas is explained on the design page .","title":"Development"},{"location":"development/development/#standing-on-the-shoulders-of-giants","text":"word2canvas uses a range of open source tools, including: mammoth.js for Word to HTML conversion userscript-builder for local development of the word2canvas userscript ...many more to add","title":"Standing on the shoulders of giants"},{"location":"development/html2Module/","text":"How to convert HTML to a Canvas module The task here is design how HTML would be converted into a Canvas module. The requirement is that there be two modes: Test conversion - which is able to describe what the resulting module would look like, without creating it. Creation - actually creating the converted module. Basic Premise Initial conversion a module consists of multiple items h1 elements break HTML into matching items the class associated with the h1 element suggests the type of item in Canvas the content of the h1 element becomes the title of the item all the HTML until the next h1 becomes the content for the item Questions If and how to do anything about indented items Current instantation CompletedView::render - setup interface - add event listeners for module-created renderCreationResults and module-error renderCreationError - As last step calls this.model.createModule Model::createModule - Create the new module - async this.canvasModules.createModule(this.htmlConverter) - Create the items for the module - then this.createModuleItems Events to be handled - w2c-empty-module-created - w2c-item-found-created - w2c-module-item-added - w2c-module-created not needed as item added check will do this in view Workflow - CompletedView::render > this.model.createModule - createModule > w2c-empty-module-created > view.checkEmptyModuleCreated - checkEmptyModuleCreate - does checks > model.findOrCreateModuleItems OR error - findOrCreateModuleItems > many model.findOrCreateItem > w2c-item-found-created > view.checkItemFoundCreated - checkItemFoundCreate - does checks > updates view about num created items > if all created model.addItemsToModule 1 Module creationg started Should be createModule.then( signal module created ) moduleCreate { check the creation, that we have everything createModuleItems.then( signal module items created ) } moduleItemsCreated { check the items, see that we have everything Actually a harness to findOrCreateItem addItemsToModule.then( signal module items added // there are multiple items to be created. The handler of this signal // should only signal the next step once all the items have been found/created // ??? maybe ) } moduleItemsAdded{ this is really creation success } Module::createModuleItems - can access the newly created module this.canvasModules.createModule.id - for each item from this.htmlConvertere.items - find or create the item this.findOrCreateItem - add the found/created item to the module this.createModuleItem Module::findOrCreateItem - determine type of item - call appropriate function from this.canvasModules TODO - create page needs to get passed back and handed to create Module item Module::addModuleItem - add a module item to the module - it already knows the item - calls this.canvasModules.addModuleItem to do the API stuff Thinking - Question is whether or not the async APIs are happening in the right order. Rough design Module object some config info title items Items object title content type select all h1s to identify items use nextUntil to identify the content Process Break HTML into items and identify - this is the structure the view will represent Use the module/module item structure from canvas-collections?? Use that structure Canvas API Looks like the API requires you create the item first and then provide the id when you add an item to a module Modules List modules Create a module Create a module item Update a module defines the module object - object with defined fields Examples E-learning long list of ruby code including apparently create module -- Not useful moduley.py Python code for module class, including create_module_item Data structures module_item[type] = File, Page, Discussion, Assignment, Quiz, SubHeader, ExternalUrl, ExternalTool <!-- start of module div --> < div class = \"item-group-condensed context_module editable_context_module collapsed_module\" aria-label = \"${model.moduleTitle}\" data-workflow-state = \"active\" style = \"\" > <!-- data-module-url=\"/courses/115/modules/150\" data-module-id=\"n/a\" id=\"context_module_150\" style=\"\"> --> < a id = \"c2m_sample_module\" ></ a > <!-- start of module title/name div --> < div class = \"ig-header header\" id = \"c2m_sample_module_header\" > <!-- <span class=\"sortable-handle reorder_module_link\" title=\"Drag to reorder modules\" style=\"\" > <i aria-hidden=\"true\" class=\"icon-drag-handle\"></i> </span> --> < h2 class = \"screenreader-only\" > ${model.moduleTitle} </ h2 > <!-- <span role=\"button\" tabindex=\"0\" href=\"/courses/115/modules/150/collapse\" class=\"ig-header-title collapse_module_link ellipsis\" aria-controls=\"context_module_content_150\" aria-expanded=\"true\" aria-label=\"Misc Module toggle module visibility\" title=\"Misc Module\" style=\"display: inline-block;\" > <i class=\"icon-mini-arrow-down\"></i> <span class=\"name\" title=\"Misc Module\">Misc Module</span> </span> <span role=\"button\" tabindex=\"0\" href=\"/courses/115/modules/150/collapse\" class=\"ig-header-title expand_module_link ellipsis\" aria-controls=\"context_module_content_150\" aria-expanded=\"false\" aria-label=\"Misc Module toggle module visibility\" title=\"Misc Module\" style=\"display: none;\" > <i class=\"icon-mini-arrow-right\"></i> <span class=\"name ellipsis\" title=\"Misc Module\">Misc Module</span> </span> --> <!-- prerequisites --> < div class = \"prerequisites\" > <!-- need to set/unset display:none as required --> < div class = \"prerequisites_message\" title = \"Prerequisites: \" style = \"display: none;\" > Prerequisites: <!-- TODO have a mechanism to set this --> </ div > </ div > < div class = \"requirements_message\" > <!-- TODO --> </ div > <!-- module header info --> <!-- <div class=\"ig-header-admin\"> <span data-module-type=\"module\" data-id=\"150\" data-course-id=\"115\" data-published=\"true\" data-publishable=\"true\" data-publish-title=\"Misc Module\" title=\"Published\" data-tooltip=\"\" class=\"publish-icon module published publish-icon-published\" role=\"button\" tabindex=\"0\" aria-pressed=\"true\" aria-label=\"Published. Click to unpublish Misc Module.\" ><i class=\"icon-publish icon-Solid\"></i ><span class=\"publish-text\" tabindex=\"-1\">&nbsp;Published</span ><span class=\"screenreader-only accessible_label\" >Published. Click to unpublish Misc Module.</span ></span > <button aria-label=\"Add Content to Misc Module\" rel=\"/courses/115/modules/150/items\" class=\"add_module_item_link Button--icon-action\" > <i class=\"icon-plus\"></i><span class=\"screenreader-only\">Add Content to Misc Module</span> </button> <button class=\"Button--icon-action al-trigger\" aria-label=\"Manage Misc Module\" > <i class=\"icon-more\" aria-hidden=\"true\"></i> </button> <ul class=\"al-options\"> </ul> <span style=\"display: none;\"> <span class=\"name\" title=\"Misc Module\">Misc Module</span> <span class=\"id\">150</span> <span class=\"publish_final_grade\">&nbsp;</span> <span class=\"require_sequential_progress\">&nbsp;</span> </span> --> </ div > </ div > <!-- start of the items --> < div class = \"content\" id = \"context_module_content_150\" style = \"display: block;\" > < ul class = \"ig-list items context_module_items manageable ui-sortable\" > < li id = \"context_module_item_1078\" style = \"\" class = \"context_module_item external_url indent_0 _requirement ExternalUrl_0\" > < div class = \"ig-row \" > < a aria-label = \"Collaborate Ultra: Other Supports\" tabindex = \"-1\" class = \"for-nvda\" href = \"/courses/115/modules/items/1078\" > Collaborate Ultra: Other Supports </ a > <!-- draggable icon <div aria-hidden=\"true\" class=\"ig-handle\"> <span class=\"draggable-handle move_item_link\" title=\"Drag to reorder or move item to another module\" > <i class=\"icon-drag-handle\" aria-hidden=\"true\"></i> </span> </div> --> <!-- the type icon - keep, but maybe add tooltip?? --> < span class = \"type_icon\" title = \"External Url\" role = \"none\" > < span class = \"screenreader-only\" > TODO TYPE External Url </ span > < span class = \"ig-type-icon\" > < i class = \"icon-document\" ></ i > < i class = \"icon-paperclip\" ></ i > < i class = \"icon-discussion\" ></ i > < i class = \"icon-assignment\" ></ i > < i class = \"icon-quiz\" ></ i > < i class = \"icon-quiz icon-Solid\" ></ i > < i class = \"icon-link\" ></ i > <!-- it seems to do something here --> <!-- <img id=\"mc_icon\" src=\"/images/icons/mc_icon_unpub.svg\" alt=\"Mastery Connect\" style=\"display: none; width: 1rem; height: 1rem;\" /> --> </ span > </ span > < div class = \"ig-info\" > < div class = \"module-item-title\" > < span class = \"item_name\" > < a title = \"${item.title}\" class = \"ig-title title item_link\" > ${item.title} </ a > < span title = \"{item.title}\" class = \"title locked_title\" > ${item.title} </ span > < span class = \"points_possible\" style = \"display: none;\" > TODO </ span > < span class = \"requirement\" style = \"display: none;\" > TODO </ span > < span class = \"completion_requirement\" style = \"display: none;\" > TODO </ span > < span class = \"position\" style = \"display: none;\" > 2 </ span > <!-- TODO this is the URL for the actual external link --> < span class = \"url\" style = \"display: none;\" > TODO </ span > < span class = \"new_tab\" style = \"display: none;\" > 0 </ span > </ span > </ div > < div class = \"module_item_icons nobr\" > <!-- dead code? --> < span class = \"criterion \" > < span class = \"min_score\" style = \"display: none;\" > &nbsp; </ span > < span class = \"criterion_type\" style = \"display: none;\" > &nbsp; </ span > </ span > <!-- /dead code --> < span class = \"type\" style = \"display: none;\" > external_url </ span > < span class = \"id\" style = \"display: none;\" > 1078 </ span > < span class = \"graded\" style = \"display: none;\" > 0 </ span > </ div > < div class = \"ig-details\" > < div class = \"requirement-description ig-details__item\" > < span class = \"completion_requirement\" > < span class = \"requirement_type min_score_requirement\" > < span class = \"unfulfilled\" > Score at least < span class = \"min_score\" > &nbsp; </ span > < span class = \"screenreader-only\" > Must score at least < span class = \"min_score\" > &nbsp; </ span > to complete this module item </ span > </ span > < span class = \"fulfilled\" > Scored at least < span class = \"min_score\" > &nbsp; </ span > < span class = \"screenreader-only\" > Module item has been completed by scoring at least < span class = \"min_score\" > &nbsp; </ span ></ span > </ span > </ span > < span class = \"requirement_type must_view_requirement\" > < span class = \"unfulfilled\" > View < span class = \"screenreader-only\" > Must view in order to complete this module item </ span > </ span > < span class = \"fulfilled\" > Viewed < span class = \"screenreader-only\" > Module item has been viewed and is complete </ span > </ span > </ span > < span class = \"requirement_type must_mark_done_requirement\" > < span class = \"unfulfilled\" > Mark as done < span class = \"screenreader-only\" > Must mark this module item done in order to complete </ span > </ span > < span class = \"fulfilled\" > Marked as done < span class = \"screenreader-only\" > Module item marked as done and is complete </ span > </ span > </ span > < span class = \"requirement_type must_contribute_requirement\" > < span class = \"unfulfilled\" > Contribute < span class = \"screenreader-only\" > Must contribute to this module item to complete it </ span > </ span > < span class = \"fulfilled\" > Contributed < span class = \"screenreader-only\" > Contributed to this module item and is complete </ span > </ span > </ span > < span class = \"requirement_type must_submit_requirement\" > < span class = \"unfulfilled\" > Submit < span class = \"screenreader-only\" > Must submit this module item to complete it </ span > </ span > < span class = \"fulfilled\" > Submitted < span class = \"screenreader-only\" > Module item submitted and is complete </ span > </ span > </ span > </ span > </ div > <!-- requirement description end --> </ div > </ div > <!-- <div class=\"ig-admin\"> </div> --> </ div > </ li > </ ul > </ div > </ div >","title":"How to convert HTML to a Canvas module"},{"location":"development/html2Module/#how-to-convert-html-to-a-canvas-module","text":"The task here is design how HTML would be converted into a Canvas module. The requirement is that there be two modes: Test conversion - which is able to describe what the resulting module would look like, without creating it. Creation - actually creating the converted module.","title":"How to convert HTML to a Canvas module"},{"location":"development/html2Module/#basic-premise","text":"Initial conversion a module consists of multiple items h1 elements break HTML into matching items the class associated with the h1 element suggests the type of item in Canvas the content of the h1 element becomes the title of the item all the HTML until the next h1 becomes the content for the item Questions If and how to do anything about indented items","title":"Basic Premise"},{"location":"development/html2Module/#current-instantation","text":"CompletedView::render - setup interface - add event listeners for module-created renderCreationResults and module-error renderCreationError - As last step calls this.model.createModule Model::createModule - Create the new module - async this.canvasModules.createModule(this.htmlConverter) - Create the items for the module - then this.createModuleItems Events to be handled - w2c-empty-module-created - w2c-item-found-created - w2c-module-item-added - w2c-module-created not needed as item added check will do this in view Workflow - CompletedView::render > this.model.createModule - createModule > w2c-empty-module-created > view.checkEmptyModuleCreated - checkEmptyModuleCreate - does checks > model.findOrCreateModuleItems OR error - findOrCreateModuleItems > many model.findOrCreateItem > w2c-item-found-created > view.checkItemFoundCreated - checkItemFoundCreate - does checks > updates view about num created items > if all created model.addItemsToModule 1 Module creationg started Should be createModule.then( signal module created ) moduleCreate { check the creation, that we have everything createModuleItems.then( signal module items created ) } moduleItemsCreated { check the items, see that we have everything Actually a harness to findOrCreateItem addItemsToModule.then( signal module items added // there are multiple items to be created. The handler of this signal // should only signal the next step once all the items have been found/created // ??? maybe ) } moduleItemsAdded{ this is really creation success } Module::createModuleItems - can access the newly created module this.canvasModules.createModule.id - for each item from this.htmlConvertere.items - find or create the item this.findOrCreateItem - add the found/created item to the module this.createModuleItem Module::findOrCreateItem - determine type of item - call appropriate function from this.canvasModules TODO - create page needs to get passed back and handed to create Module item Module::addModuleItem - add a module item to the module - it already knows the item - calls this.canvasModules.addModuleItem to do the API stuff Thinking - Question is whether or not the async APIs are happening in the right order.","title":"Current instantation"},{"location":"development/html2Module/#rough-design","text":"Module object some config info title items Items object title content type select all h1s to identify items use nextUntil to identify the content","title":"Rough design"},{"location":"development/html2Module/#process","text":"Break HTML into items and identify - this is the structure the view will represent Use the module/module item structure from canvas-collections?? Use that structure","title":"Process"},{"location":"development/html2Module/#canvas-api","text":"Looks like the API requires you create the item first and then provide the id when you add an item to a module","title":"Canvas API"},{"location":"development/html2Module/#modules","text":"List modules Create a module Create a module item Update a module defines the module object - object with defined fields","title":"Modules"},{"location":"development/html2Module/#examples","text":"E-learning long list of ruby code including apparently create module -- Not useful moduley.py Python code for module class, including create_module_item","title":"Examples"},{"location":"development/html2Module/#data-structures","text":"module_item[type] = File, Page, Discussion, Assignment, Quiz, SubHeader, ExternalUrl, ExternalTool <!-- start of module div --> < div class = \"item-group-condensed context_module editable_context_module collapsed_module\" aria-label = \"${model.moduleTitle}\" data-workflow-state = \"active\" style = \"\" > <!-- data-module-url=\"/courses/115/modules/150\" data-module-id=\"n/a\" id=\"context_module_150\" style=\"\"> --> < a id = \"c2m_sample_module\" ></ a > <!-- start of module title/name div --> < div class = \"ig-header header\" id = \"c2m_sample_module_header\" > <!-- <span class=\"sortable-handle reorder_module_link\" title=\"Drag to reorder modules\" style=\"\" > <i aria-hidden=\"true\" class=\"icon-drag-handle\"></i> </span> --> < h2 class = \"screenreader-only\" > ${model.moduleTitle} </ h2 > <!-- <span role=\"button\" tabindex=\"0\" href=\"/courses/115/modules/150/collapse\" class=\"ig-header-title collapse_module_link ellipsis\" aria-controls=\"context_module_content_150\" aria-expanded=\"true\" aria-label=\"Misc Module toggle module visibility\" title=\"Misc Module\" style=\"display: inline-block;\" > <i class=\"icon-mini-arrow-down\"></i> <span class=\"name\" title=\"Misc Module\">Misc Module</span> </span> <span role=\"button\" tabindex=\"0\" href=\"/courses/115/modules/150/collapse\" class=\"ig-header-title expand_module_link ellipsis\" aria-controls=\"context_module_content_150\" aria-expanded=\"false\" aria-label=\"Misc Module toggle module visibility\" title=\"Misc Module\" style=\"display: none;\" > <i class=\"icon-mini-arrow-right\"></i> <span class=\"name ellipsis\" title=\"Misc Module\">Misc Module</span> </span> --> <!-- prerequisites --> < div class = \"prerequisites\" > <!-- need to set/unset display:none as required --> < div class = \"prerequisites_message\" title = \"Prerequisites: \" style = \"display: none;\" > Prerequisites: <!-- TODO have a mechanism to set this --> </ div > </ div > < div class = \"requirements_message\" > <!-- TODO --> </ div > <!-- module header info --> <!-- <div class=\"ig-header-admin\"> <span data-module-type=\"module\" data-id=\"150\" data-course-id=\"115\" data-published=\"true\" data-publishable=\"true\" data-publish-title=\"Misc Module\" title=\"Published\" data-tooltip=\"\" class=\"publish-icon module published publish-icon-published\" role=\"button\" tabindex=\"0\" aria-pressed=\"true\" aria-label=\"Published. Click to unpublish Misc Module.\" ><i class=\"icon-publish icon-Solid\"></i ><span class=\"publish-text\" tabindex=\"-1\">&nbsp;Published</span ><span class=\"screenreader-only accessible_label\" >Published. Click to unpublish Misc Module.</span ></span > <button aria-label=\"Add Content to Misc Module\" rel=\"/courses/115/modules/150/items\" class=\"add_module_item_link Button--icon-action\" > <i class=\"icon-plus\"></i><span class=\"screenreader-only\">Add Content to Misc Module</span> </button> <button class=\"Button--icon-action al-trigger\" aria-label=\"Manage Misc Module\" > <i class=\"icon-more\" aria-hidden=\"true\"></i> </button> <ul class=\"al-options\"> </ul> <span style=\"display: none;\"> <span class=\"name\" title=\"Misc Module\">Misc Module</span> <span class=\"id\">150</span> <span class=\"publish_final_grade\">&nbsp;</span> <span class=\"require_sequential_progress\">&nbsp;</span> </span> --> </ div > </ div > <!-- start of the items --> < div class = \"content\" id = \"context_module_content_150\" style = \"display: block;\" > < ul class = \"ig-list items context_module_items manageable ui-sortable\" > < li id = \"context_module_item_1078\" style = \"\" class = \"context_module_item external_url indent_0 _requirement ExternalUrl_0\" > < div class = \"ig-row \" > < a aria-label = \"Collaborate Ultra: Other Supports\" tabindex = \"-1\" class = \"for-nvda\" href = \"/courses/115/modules/items/1078\" > Collaborate Ultra: Other Supports </ a > <!-- draggable icon <div aria-hidden=\"true\" class=\"ig-handle\"> <span class=\"draggable-handle move_item_link\" title=\"Drag to reorder or move item to another module\" > <i class=\"icon-drag-handle\" aria-hidden=\"true\"></i> </span> </div> --> <!-- the type icon - keep, but maybe add tooltip?? --> < span class = \"type_icon\" title = \"External Url\" role = \"none\" > < span class = \"screenreader-only\" > TODO TYPE External Url </ span > < span class = \"ig-type-icon\" > < i class = \"icon-document\" ></ i > < i class = \"icon-paperclip\" ></ i > < i class = \"icon-discussion\" ></ i > < i class = \"icon-assignment\" ></ i > < i class = \"icon-quiz\" ></ i > < i class = \"icon-quiz icon-Solid\" ></ i > < i class = \"icon-link\" ></ i > <!-- it seems to do something here --> <!-- <img id=\"mc_icon\" src=\"/images/icons/mc_icon_unpub.svg\" alt=\"Mastery Connect\" style=\"display: none; width: 1rem; height: 1rem;\" /> --> </ span > </ span > < div class = \"ig-info\" > < div class = \"module-item-title\" > < span class = \"item_name\" > < a title = \"${item.title}\" class = \"ig-title title item_link\" > ${item.title} </ a > < span title = \"{item.title}\" class = \"title locked_title\" > ${item.title} </ span > < span class = \"points_possible\" style = \"display: none;\" > TODO </ span > < span class = \"requirement\" style = \"display: none;\" > TODO </ span > < span class = \"completion_requirement\" style = \"display: none;\" > TODO </ span > < span class = \"position\" style = \"display: none;\" > 2 </ span > <!-- TODO this is the URL for the actual external link --> < span class = \"url\" style = \"display: none;\" > TODO </ span > < span class = \"new_tab\" style = \"display: none;\" > 0 </ span > </ span > </ div > < div class = \"module_item_icons nobr\" > <!-- dead code? --> < span class = \"criterion \" > < span class = \"min_score\" style = \"display: none;\" > &nbsp; </ span > < span class = \"criterion_type\" style = \"display: none;\" > &nbsp; </ span > </ span > <!-- /dead code --> < span class = \"type\" style = \"display: none;\" > external_url </ span > < span class = \"id\" style = \"display: none;\" > 1078 </ span > < span class = \"graded\" style = \"display: none;\" > 0 </ span > </ div > < div class = \"ig-details\" > < div class = \"requirement-description ig-details__item\" > < span class = \"completion_requirement\" > < span class = \"requirement_type min_score_requirement\" > < span class = \"unfulfilled\" > Score at least < span class = \"min_score\" > &nbsp; </ span > < span class = \"screenreader-only\" > Must score at least < span class = \"min_score\" > &nbsp; </ span > to complete this module item </ span > </ span > < span class = \"fulfilled\" > Scored at least < span class = \"min_score\" > &nbsp; </ span > < span class = \"screenreader-only\" > Module item has been completed by scoring at least < span class = \"min_score\" > &nbsp; </ span ></ span > </ span > </ span > < span class = \"requirement_type must_view_requirement\" > < span class = \"unfulfilled\" > View < span class = \"screenreader-only\" > Must view in order to complete this module item </ span > </ span > < span class = \"fulfilled\" > Viewed < span class = \"screenreader-only\" > Module item has been viewed and is complete </ span > </ span > </ span > < span class = \"requirement_type must_mark_done_requirement\" > < span class = \"unfulfilled\" > Mark as done < span class = \"screenreader-only\" > Must mark this module item done in order to complete </ span > </ span > < span class = \"fulfilled\" > Marked as done < span class = \"screenreader-only\" > Module item marked as done and is complete </ span > </ span > </ span > < span class = \"requirement_type must_contribute_requirement\" > < span class = \"unfulfilled\" > Contribute < span class = \"screenreader-only\" > Must contribute to this module item to complete it </ span > </ span > < span class = \"fulfilled\" > Contributed < span class = \"screenreader-only\" > Contributed to this module item and is complete </ span > </ span > </ span > < span class = \"requirement_type must_submit_requirement\" > < span class = \"unfulfilled\" > Submit < span class = \"screenreader-only\" > Must submit this module item to complete it </ span > </ span > < span class = \"fulfilled\" > Submitted < span class = \"screenreader-only\" > Module item submitted and is complete </ span > </ span > </ span > </ span > </ div > <!-- requirement description end --> </ div > </ div > <!-- <div class=\"ig-admin\"> </div> --> </ div > </ li > </ ul > </ div > </ div >","title":"Data structures"},{"location":"development/local-development/","text":"Local development and testing Developing word2canvas is current achieved using Chrome, with TamperMonkey installed and configured to allow local file acess . The dev userscript version of the userscript. userscript-builder configured to generate the dev userscript.","title":"Local Development"},{"location":"development/local-development/#local-development-and-testing","text":"Developing word2canvas is current achieved using Chrome, with TamperMonkey installed and configured to allow local file acess . The dev userscript version of the userscript. userscript-builder configured to generate the dev userscript.","title":"Local development and testing"},{"location":"getting-started/install/","text":"Install word2canvas There are two steps to installing word2canvas : Install a userscript manager (if you haven't already)] You install a userscript manager into your web browser (not surprisingly) to manage userscripts. Install the the word2canvas userscript word2canvas is designed to run whenever you view the Modules page of the Canvas LMS. Userscripts customise web pages to better suit your purposes. e.g. to help you create a Canvas module from a Word document. About Userscripts word2canvas is written as a userscript . A small program that is installed on your web browser and only run when you view specific web pages. Userscripts are installed in your current web browser. If you move to another computer or use a different browser, the userscript will not work on that different browser. You need to install the userscript (and the userscript manager) on each browser you use. 1. Install a userscript manager If you don't already have a userscript manager installed, you can install one from TamperMonkey . TamperMonkey is a widely used userscript manager. It can be used on most modern web browsers. There is video showing how to install TamperMonkey . 1.1. Visit the Tampermonkey home page . You should see instructions for downloading (installing) TamperMonkey for your web browser. e.g. the following image for the Firefox browser 1.2. Click on the left-hand Download button As shown above, you can choose to download the stable (left-hand download button) version of TamperMonkey or the BETA (right-hand download button) version. The stable version is recommended. You will be taken to your web brower's extension or add-on service . 1.3. Follow the instructions to add Tampermonkey to your web browser Each web browser\u2019s browser extension installation process will be a little different. In general, it will provide you with details of what permissions the browser extension (Tampemonkey in this case) wishes to have and provides you with the option to install. 2. Install the word2canvas userscript With TamperMonkey installed you can now install the word2canvas userscript . Just click on that link. If all is working you should something like the following image. An image showing TamperMonkey providing you with details of the userscript and asking if you wish to install it. 3. Turning word2canvas off There are two ways to prevent word2canvas from modifying your view of Canvas modules pages: - Disable or remove TamperMonkey - Disable the word2canvas userscript by accessing the TamperMonkey dashboard and disabling Word 2 Canvas Module (see below) 4. Testing word2canvas The next step is to test word2canvas with Canvas.","title":"1. Install"},{"location":"getting-started/install/#install-word2canvas","text":"There are two steps to installing word2canvas : Install a userscript manager (if you haven't already)] You install a userscript manager into your web browser (not surprisingly) to manage userscripts. Install the the word2canvas userscript word2canvas is designed to run whenever you view the Modules page of the Canvas LMS. Userscripts customise web pages to better suit your purposes. e.g. to help you create a Canvas module from a Word document. About Userscripts word2canvas is written as a userscript . A small program that is installed on your web browser and only run when you view specific web pages. Userscripts are installed in your current web browser. If you move to another computer or use a different browser, the userscript will not work on that different browser. You need to install the userscript (and the userscript manager) on each browser you use.","title":"Install word2canvas"},{"location":"getting-started/install/#1-install-a-userscript-manager","text":"If you don't already have a userscript manager installed, you can install one from TamperMonkey . TamperMonkey is a widely used userscript manager. It can be used on most modern web browsers. There is video showing how to install TamperMonkey .","title":"1. Install a userscript manager"},{"location":"getting-started/install/#11-visit-the-tampermonkey-home-page","text":"You should see instructions for downloading (installing) TamperMonkey for your web browser. e.g. the following image for the Firefox browser","title":"1.1. Visit the Tampermonkey home page."},{"location":"getting-started/install/#12-click-on-the-left-hand-download-button","text":"As shown above, you can choose to download the stable (left-hand download button) version of TamperMonkey or the BETA (right-hand download button) version. The stable version is recommended. You will be taken to your web brower's extension or add-on service .","title":"1.2. Click on the left-hand Download button"},{"location":"getting-started/install/#13-follow-the-instructions-to-add-tampermonkey-to-your-web-browser","text":"Each web browser\u2019s browser extension installation process will be a little different. In general, it will provide you with details of what permissions the browser extension (Tampemonkey in this case) wishes to have and provides you with the option to install.","title":"1.3. Follow the instructions to add Tampermonkey to your web browser"},{"location":"getting-started/install/#2-install-the-word2canvas-userscript","text":"With TamperMonkey installed you can now install the word2canvas userscript . Just click on that link. If all is working you should something like the following image. An image showing TamperMonkey providing you with details of the userscript and asking if you wish to install it.","title":"2. Install the word2canvas userscript"},{"location":"getting-started/install/#3-turning-word2canvas-off","text":"There are two ways to prevent word2canvas from modifying your view of Canvas modules pages: - Disable or remove TamperMonkey - Disable the word2canvas userscript by accessing the TamperMonkey dashboard and disabling Word 2 Canvas Module (see below)","title":"3. Turning word2canvas off"},{"location":"getting-started/install/#4-testing-word2canvas","text":"The next step is to test word2canvas with Canvas.","title":"4. Testing word2canvas"},{"location":"getting-started/overview/","text":"Getting Started with word2canvas Install word2canvas Install a userscript manager (e.g. TamperMonkey ) on your browser of choice and then install the word-2-canvas userscript . Test word2canvas By creating a module from the sample Word document. Use word2canvas Typically usage involves two steps: 1) Create a Word document with your content, and 2) Use word2canvas to create a Canvas module from the Word document.","title":"Overview"},{"location":"getting-started/overview/#getting-started-with-word2canvas","text":"Install word2canvas Install a userscript manager (e.g. TamperMonkey ) on your browser of choice and then install the word-2-canvas userscript . Test word2canvas By creating a module from the sample Word document. Use word2canvas Typically usage involves two steps: 1) Create a Word document with your content, and 2) Use word2canvas to create a Canvas module from the Word document.","title":"Getting Started with word2canvas"},{"location":"getting-started/test/","text":"Testing word2canvas There is a 3-step process to test word2canvas : Prepare pre-requisites Check that word2canvas is active Use word2canvas with a sample Word document Another example The \"sample Word document\" walk-through is a screencast of the steps below using the sample w2c.docx document 1. Prepare pre-requisites To test word2canvas you will need A browser with the word2canvas userscript installed. A Canvas course site on which you can create Modules. Have downloaded the firstTestDocument.docx file to your computer. 2. Check that word2canvas is active With word2canvas installed in your browser, go to the Modules page of your Canvas course. Not in Student View . You should see something similar to the following. The new addition is the .docx 2 + Module button to the left of the + Module button in the top right-hand corner. This button has been added by word2canvas . If you don't see this button, there is a problem that needs to diagnosed and remedied 3. Use word2canvas with a sample document Create a new module by clicking the .docx 2 + Module button. This should add the .docx 2 + Canvas Module interface at the top of the page you're viewing. e.g. the following image. Use the Browse button to select the firstTestDocument.docx file you downloaded. Follow the advice shown and your module should be created and you'll end up with something like the following.","title":"2. Test"},{"location":"getting-started/test/#testing-word2canvas","text":"There is a 3-step process to test word2canvas : Prepare pre-requisites Check that word2canvas is active Use word2canvas with a sample Word document Another example The \"sample Word document\" walk-through is a screencast of the steps below using the sample w2c.docx document","title":"Testing word2canvas"},{"location":"getting-started/test/#1-prepare-pre-requisites","text":"To test word2canvas you will need A browser with the word2canvas userscript installed. A Canvas course site on which you can create Modules. Have downloaded the firstTestDocument.docx file to your computer.","title":"1. Prepare pre-requisites"},{"location":"getting-started/test/#2-check-that-word2canvas-is-active","text":"With word2canvas installed in your browser, go to the Modules page of your Canvas course. Not in Student View . You should see something similar to the following. The new addition is the .docx 2 + Module button to the left of the + Module button in the top right-hand corner. This button has been added by word2canvas . If you don't see this button, there is a problem that needs to diagnosed and remedied","title":"2. Check that word2canvas is active"},{"location":"getting-started/test/#3-use-word2canvas-with-a-sample-document","text":"Create a new module by clicking the .docx 2 + Module button. This should add the .docx 2 + Canvas Module interface at the top of the page you're viewing. e.g. the following image. Use the Browse button to select the firstTestDocument.docx file you downloaded. Follow the advice shown and your module should be created and you'll end up with something like the following.","title":"3. Use word2canvas with a sample document"},{"location":"getting-started/use/","text":"Using word2canvas Using word2canvas for your own purposes typically involves two steps: Create a Word document Use word2canvas to create a Canvas module 1. Create a Word document 2. Use word2canvas to create a Canvas module","title":"3. Use"},{"location":"getting-started/use/#using-word2canvas","text":"Using word2canvas for your own purposes typically involves two steps: Create a Word document Use word2canvas to create a Canvas module","title":"Using word2canvas"},{"location":"getting-started/use/#1-create-a-word-document","text":"","title":"1. Create a Word document"},{"location":"getting-started/use/#2-use-word2canvas-to-create-a-canvas-module","text":"","title":"2. Use word2canvas to create a Canvas module"},{"location":"limitations/diagnosis/","text":"Diagnosising and fixing issues A short (but growing) list of questions that may help you diagnose issues with word2canvas Is your userscript manager turned on? Userscript managers (e.g. TamperMonkey) can be turned on or off. If it is off, then the userscripts are not executed. Nothing will happen. Most userscript managers add an icon to your browser to indicate status (e.g. is it on) and to configure how it works. You may need to refer to your userscript manager's documentation to discover how to make it's icon visible on your browser. The followint table illustrates the difference between TamperMonkey being on - the TamperMonkey icon is a dark colour and if there are active userscripts it will show how many. off - the TamperMonkey icon is greyed out. TamperMonkey On TamperMonkey Off Clicking on the UserScript manager icon will typically provide a way to turn it on or off. TamperMonkey On TamperMonkey Off Is the word2canvas userscript installed? Is the word2canvas userscript enabled?","title":"Diagnosis"},{"location":"limitations/diagnosis/#diagnosising-and-fixing-issues","text":"A short (but growing) list of questions that may help you diagnose issues with word2canvas","title":"Diagnosising and fixing issues"},{"location":"limitations/diagnosis/#is-your-userscript-manager-turned-on","text":"Userscript managers (e.g. TamperMonkey) can be turned on or off. If it is off, then the userscripts are not executed. Nothing will happen. Most userscript managers add an icon to your browser to indicate status (e.g. is it on) and to configure how it works. You may need to refer to your userscript manager's documentation to discover how to make it's icon visible on your browser. The followint table illustrates the difference between TamperMonkey being on - the TamperMonkey icon is a dark colour and if there are active userscripts it will show how many. off - the TamperMonkey icon is greyed out. TamperMonkey On TamperMonkey Off Clicking on the UserScript manager icon will typically provide a way to turn it on or off. TamperMonkey On TamperMonkey Off","title":"Is your userscript manager turned on?"},{"location":"limitations/diagnosis/#is-the-word2canvas-userscript-installed","text":"","title":"Is the word2canvas userscript installed?"},{"location":"limitations/diagnosis/#is-the-word2canvas-userscript-enabled","text":"","title":"Is the word2canvas userscript enabled?"},{"location":"limitations/limitations/","text":"Limitations and Issues word2canvas is actively being used but is still under development and has some known limitations. Feel free to use th word2canvas Issues forum to ask questions and report any problems. Known Limitations Doesn't handle images embedded in Word documents. The Canvas editor removes base64 encoded images from HTML . The method word2canvas uses to convert the Word document to HTML converts images to base64 encoded images. The current suggested \"solution\" requires manual saving of these images and using them to replace placeholder images via the Canvas RCE. Required to use very specific Word styles. Your Word document must use very specific styles to correctly create Canvas Modules and their items. There is a learning curve involved. Doesn't work for new Quizzes . Entirely because Canvas does not yet have an API for new Quizzes . Known Issues Currently, no known major issues. Various bugs and improvements details in the Issues forum","title":"Limitations and Issues"},{"location":"limitations/limitations/#limitations-and-issues","text":"word2canvas is actively being used but is still under development and has some known limitations. Feel free to use th word2canvas Issues forum to ask questions and report any problems.","title":"Limitations and Issues"},{"location":"limitations/limitations/#known-limitations","text":"Doesn't handle images embedded in Word documents. The Canvas editor removes base64 encoded images from HTML . The method word2canvas uses to convert the Word document to HTML converts images to base64 encoded images. The current suggested \"solution\" requires manual saving of these images and using them to replace placeholder images via the Canvas RCE. Required to use very specific Word styles. Your Word document must use very specific styles to correctly create Canvas Modules and their items. There is a learning curve involved. Doesn't work for new Quizzes . Entirely because Canvas does not yet have an API for new Quizzes .","title":"Known Limitations"},{"location":"limitations/limitations/#known-issues","text":"Currently, no known major issues. Various bugs and improvements details in the Issues forum","title":"Known Issues"},{"location":"reference/overview/","text":"Reference overview Overview of supported MS Word Styles [MS Word styles][word-styles.md] are used to specify what and how word2canvas converts the content of a Word document into a Canvas module. Available options How word2canvas converts a Word document into a Canvas module can be modified through the use of options, including: Keeping error labels H2s as accordions Disabling inline youtube previews Warnings and how to handle them word2canvas will generate various warnings whilst generating a Canvas module.","title":"Overview"},{"location":"reference/overview/#reference-overview","text":"","title":"Reference overview"},{"location":"reference/overview/#overview-of-supported-ms-word-styles","text":"[MS Word styles][word-styles.md] are used to specify what and how word2canvas converts the content of a Word document into a Canvas module.","title":"Overview of supported MS Word Styles"},{"location":"reference/overview/#available-options","text":"How word2canvas converts a Word document into a Canvas module can be modified through the use of options, including: Keeping error labels H2s as accordions Disabling inline youtube previews","title":"Available options"},{"location":"reference/overview/#warnings-and-how-to-handle-them","text":"word2canvas will generate various warnings whilst generating a Canvas module.","title":"Warnings and how to handle them"},{"location":"reference/warnings/","text":"Warnings (and maybe how to fix them) About warnings word2canvas will detect issues with the conversion from Word to a Canvas module and attempt to generate meaningful warnings. These warnings will often include links to this documentation for more information and advice on how to remedy the potential issue. The following image is one example. In this case the two warnings provided are of the same type. Current Warnings Warnings can be grouped by the following different types. Failed Word Style word2canvas relies on Word styles to determine how to convert the content of a Word document into a Canvas module. There are times when word2canvas can file to handle Word styles HTML Conversion Problems word2canvas converts Word documents to HTML and then to Canvas modules. There are times when there are problems with HTML conversion . Currently, the document problems includes: base64 conversion issues - This is actually an issue with Canvas not supporting base64 images in the HTML editor. External URLs External URLs are a type of Canvas module item. There are two common warnings associated with external URLs: No valid URL is provided More than a URL is provided Images The ability of word2canvas to work with images is \"complicated\". The Canvas Images page provides more detail, including coverage of problems.","title":"Overview"},{"location":"reference/warnings/#warnings-and-maybe-how-to-fix-them","text":"","title":"Warnings (and maybe how to fix them)"},{"location":"reference/warnings/#about-warnings","text":"word2canvas will detect issues with the conversion from Word to a Canvas module and attempt to generate meaningful warnings. These warnings will often include links to this documentation for more information and advice on how to remedy the potential issue. The following image is one example. In this case the two warnings provided are of the same type.","title":"About warnings"},{"location":"reference/warnings/#current-warnings","text":"Warnings can be grouped by the following different types.","title":"Current Warnings"},{"location":"reference/warnings/#failed-word-style","text":"word2canvas relies on Word styles to determine how to convert the content of a Word document into a Canvas module. There are times when word2canvas can file to handle Word styles","title":"Failed Word Style"},{"location":"reference/warnings/#html-conversion-problems","text":"word2canvas converts Word documents to HTML and then to Canvas modules. There are times when there are problems with HTML conversion . Currently, the document problems includes: base64 conversion issues - This is actually an issue with Canvas not supporting base64 images in the HTML editor.","title":"HTML Conversion Problems"},{"location":"reference/warnings/#external-urls","text":"External URLs are a type of Canvas module item. There are two common warnings associated with external URLs: No valid URL is provided More than a URL is provided","title":"External URLs"},{"location":"reference/warnings/#images","text":"The ability of word2canvas to work with images is \"complicated\". The Canvas Images page provides more detail, including coverage of problems.","title":"Images"},{"location":"reference/word-styles/","text":"word2canvas Word styles A word2canvas Word document uses specific Word styles to achieve different types of changes to a Canvas module. The sample w2c.docx document includes those styles and is written to demonstrate their use. The sample document walk-through shows how to use the sample document to create a Canvas module. Word styles For more on Word styles see this resource or search out your own How it works Canvas Modules are collections of items of different types. word2canvas allows you to write a Canvas module as a single Word document. Your Word document consists of a sequence of different heading styles. Each heading style represents a single Canvas item. The following illustrate how word2canvas converts the sample w2c.docx file into a Canvas module. Note how each of the headings in the Word document (e.g. \"Create a new page\", \"Welcome to the Course\",...\"Last page of this module\") are the names given to items in the Canvas module. Word document Canvas module Summary: word2canvas styles and their purpose word2canvas styles are divided into categories as to primary purpose, as summarised in the following table. The rest of the page describes each category's styles and their purpose. Category Purpose Canvas specific Create/access Canvas resource General web Create/access general web content Blackboard migration Aid in the migration of Blackboard specific content to Canvas Content Interface Migrate and emulate Content Interface functionality Miscellaneous Uncategorised purposes Canvas specific styles The following Word styles direct word2canvas to perform Canvas specific actions. e.g. create a new Canvas module with a title matching text in the Title style. word2canvas style Purpose Title 1 The title of the new Canvas module Heading 1 1 Name of a new Canvas page Existing Canvas Page Name of a Canvas page already available in the course Canvas Discussion Name of an existing Canvas discussion Canvas SubHeader Name for a new Canvas text (sub) header Canvas File The name (or part of the name) of a file already in the Canvas course's Files Canvas File Link Insert a link to a Canvas file within a page. Apply this style to some text and it assumes that the text is the name of the file that it should link to. Apply this style to a link, then it assumes the link is the name of the file. Canvas Assignment The name (or part of the name) of an assignment already in the Canvas course's Assignments Canvas Quiz The name (or part of the name) of a quiz already in the Canvas course's Quizzes Canvas External Url Add an external link as a module item Canvas External Tool Add an external tool as a module item Canvas Image Define some HTML that contains an <img tag where the img.src is the name of a file already in the Canvas course's Files area . Will attempt to identify a URL for the file and insert it into the img.src Canvas Menu Link Create a link where the \"address\" is the name of an item in the Canvas left hand menu. Will get replaced with the correct URL for the course site Canvas Quiz Limitations Canvas Quiz only works for Classic Quizzes , not New Quizzes (classic vs. new quizzes](https://it.umn.edu/services-technologies/how-tos/canvas-understand-classic-quizzes-vs-new)) because Canvas does not yet have an API for new Quizzes . General web specific styles The following style(s) direct word2canvas to perform general web specific actions. e.g. embed into a Canvas item some specific HTML. word2canvas style Purpose embed Identifies text that will be inserted into a Canvas page as HTML. e.g. use it to embed a YouTube video Blackboard migration specific styles The following style(s) directly word2canvas to perform actions designed to help migrate content from the Blackboard Learning Management System to Canvas. word2canvas style Purpose Blackboard image p Define HTML that includes an <img tag for an image residing in the content collection of a Blackboard course site. Assuming the image has been migrated to the Canvas course's files area, will create an <img tag in a Canvas page with a URL to the image in Canvas Hide Define text that should not be imported into the Canvas module. Typically used to provide Blackboard specific references to aid migration Miscellaneous styles Styles which don't quite fit into their own category (yet). word2canvas style Purpose placeholder Translates into the HTML tag . Used in QA as a placeholder that needs replacing Content Interface specific styles The Content Interface was used to create content for Blackboard. It included numerous specific styles representing different types of content. word2canvas can emulate (but not exactly) the Content Interface styles to aid in the migration of content from Blackboard to Canvas. Typically not for use beyond migrating Content Interface content (yet). word2canvas style Purpose Poem Format a block of text as a poem Weekly Workout Describe details of a \"weekly workout\" activity Activity Describe activity for student to complete Canary Exercise Type of activity called canary exercise Picture Format an image with grey background with rounded corners PicturRight Picture format but it floats right (text wraps to the left) Coming Soon Call out labelled coming soon Example Used to visually distinguish example text Note A call our or note text Reading Specify readings These are standard Word styles which you will find in most Word documents. \u21a9 \u21a9","title":"Word Styles"},{"location":"reference/word-styles/#word2canvas-word-styles","text":"A word2canvas Word document uses specific Word styles to achieve different types of changes to a Canvas module. The sample w2c.docx document includes those styles and is written to demonstrate their use. The sample document walk-through shows how to use the sample document to create a Canvas module. Word styles For more on Word styles see this resource or search out your own","title":"word2canvas Word styles"},{"location":"reference/word-styles/#how-it-works","text":"Canvas Modules are collections of items of different types. word2canvas allows you to write a Canvas module as a single Word document. Your Word document consists of a sequence of different heading styles. Each heading style represents a single Canvas item. The following illustrate how word2canvas converts the sample w2c.docx file into a Canvas module. Note how each of the headings in the Word document (e.g. \"Create a new page\", \"Welcome to the Course\",...\"Last page of this module\") are the names given to items in the Canvas module. Word document Canvas module","title":"How it works"},{"location":"reference/word-styles/#summary-word2canvas-styles-and-their-purpose","text":"word2canvas styles are divided into categories as to primary purpose, as summarised in the following table. The rest of the page describes each category's styles and their purpose. Category Purpose Canvas specific Create/access Canvas resource General web Create/access general web content Blackboard migration Aid in the migration of Blackboard specific content to Canvas Content Interface Migrate and emulate Content Interface functionality Miscellaneous Uncategorised purposes","title":"Summary: word2canvas styles and their purpose"},{"location":"reference/word-styles/#canvas-specific-styles","text":"The following Word styles direct word2canvas to perform Canvas specific actions. e.g. create a new Canvas module with a title matching text in the Title style. word2canvas style Purpose Title 1 The title of the new Canvas module Heading 1 1 Name of a new Canvas page Existing Canvas Page Name of a Canvas page already available in the course Canvas Discussion Name of an existing Canvas discussion Canvas SubHeader Name for a new Canvas text (sub) header Canvas File The name (or part of the name) of a file already in the Canvas course's Files Canvas File Link Insert a link to a Canvas file within a page. Apply this style to some text and it assumes that the text is the name of the file that it should link to. Apply this style to a link, then it assumes the link is the name of the file. Canvas Assignment The name (or part of the name) of an assignment already in the Canvas course's Assignments Canvas Quiz The name (or part of the name) of a quiz already in the Canvas course's Quizzes Canvas External Url Add an external link as a module item Canvas External Tool Add an external tool as a module item Canvas Image Define some HTML that contains an <img tag where the img.src is the name of a file already in the Canvas course's Files area . Will attempt to identify a URL for the file and insert it into the img.src Canvas Menu Link Create a link where the \"address\" is the name of an item in the Canvas left hand menu. Will get replaced with the correct URL for the course site Canvas Quiz Limitations Canvas Quiz only works for Classic Quizzes , not New Quizzes (classic vs. new quizzes](https://it.umn.edu/services-technologies/how-tos/canvas-understand-classic-quizzes-vs-new)) because Canvas does not yet have an API for new Quizzes .","title":"Canvas specific styles"},{"location":"reference/word-styles/#general-web-specific-styles","text":"The following style(s) direct word2canvas to perform general web specific actions. e.g. embed into a Canvas item some specific HTML. word2canvas style Purpose embed Identifies text that will be inserted into a Canvas page as HTML. e.g. use it to embed a YouTube video","title":"General web specific styles"},{"location":"reference/word-styles/#blackboard-migration-specific-styles","text":"The following style(s) directly word2canvas to perform actions designed to help migrate content from the Blackboard Learning Management System to Canvas. word2canvas style Purpose Blackboard image p Define HTML that includes an <img tag for an image residing in the content collection of a Blackboard course site. Assuming the image has been migrated to the Canvas course's files area, will create an <img tag in a Canvas page with a URL to the image in Canvas Hide Define text that should not be imported into the Canvas module. Typically used to provide Blackboard specific references to aid migration","title":"Blackboard migration specific styles"},{"location":"reference/word-styles/#miscellaneous-styles","text":"Styles which don't quite fit into their own category (yet). word2canvas style Purpose placeholder Translates into the HTML tag . Used in QA as a placeholder that needs replacing","title":"Miscellaneous styles"},{"location":"reference/word-styles/#content-interface-specific-styles","text":"The Content Interface was used to create content for Blackboard. It included numerous specific styles representing different types of content. word2canvas can emulate (but not exactly) the Content Interface styles to aid in the migration of content from Blackboard to Canvas. Typically not for use beyond migrating Content Interface content (yet). word2canvas style Purpose Poem Format a block of text as a poem Weekly Workout Describe details of a \"weekly workout\" activity Activity Describe activity for student to complete Canary Exercise Type of activity called canary exercise Picture Format an image with grey background with rounded corners PicturRight Picture format but it floats right (text wraps to the left) Coming Soon Call out labelled coming soon Example Used to visually distinguish example text Note A call our or note text Reading Specify readings These are standard Word styles which you will find in most Word documents. \u21a9 \u21a9","title":"Content Interface specific styles"},{"location":"reference/options/disable-inline-youtube-previews/","text":"Disable inline Youtube previews When content is not entered via the Canvas Rich Content Editor, Canvas will automatically embed a video preview whenever it sees a link to a YouTube video (and perhaps other video services). This can break the design intent. e.g. this problem and solution from the Canvas Community. By turning on the \"Disable inline Youtube previews\" option, this behavior will be disabled. Example - Inline Youtube previews enabled Example - Inline Youtube previews disabled Same page as above, but with the \"Disable inline Youtube previews\" option turned on.","title":"Disable inline youtube"},{"location":"reference/options/disable-inline-youtube-previews/#disable-inline-youtube-previews","text":"When content is not entered via the Canvas Rich Content Editor, Canvas will automatically embed a video preview whenever it sees a link to a YouTube video (and perhaps other video services). This can break the design intent. e.g. this problem and solution from the Canvas Community. By turning on the \"Disable inline Youtube previews\" option, this behavior will be disabled.","title":"Disable inline Youtube previews"},{"location":"reference/options/disable-inline-youtube-previews/#example-inline-youtube-previews-enabled","text":"","title":"Example - Inline Youtube previews enabled"},{"location":"reference/options/disable-inline-youtube-previews/#example-inline-youtube-previews-disabled","text":"Same page as above, but with the \"Disable inline Youtube previews\" option turned on.","title":"Example - Inline Youtube previews disabled"},{"location":"reference/options/h2-as-accordions/","text":"h2 as accordions By default all Heading 2 styles will become standard HTML <h2> elements. If the h2-as-accordions option is checked, they will be converted into accordions. i.e. all content from the h2 until the next h2/h1 or the end of the page will be hidden from the reader.","title":"H2s as accordions"},{"location":"reference/options/h2-as-accordions/#h2-as-accordions","text":"By default all Heading 2 styles will become standard HTML <h2> elements. If the h2-as-accordions option is checked, they will be converted into accordions. i.e. all content from the h2 until the next h2/h1 or the end of the page will be hidden from the reader.","title":"h2 as accordions"},{"location":"reference/options/keep-error-labels/","text":"Keep error labels in Canvas content During the conversion process word2canvas will generate a number of errors and warnings. These identify possible issues with the conversion process that may require manual intervention. By default these labels are NOT included in the content added to Canvas. If turned on this option will include the error labels in the generated Canvas content. The purpose being to make it easier for you to identify what needs to be fixed. Check HTML stage error labels During the Check HTML stage word2canvas will generate warnings and errors about the conversion process. These are visible both in the Messages and HTML panels. Messages panel For example, the following shows three warnings and three warnings. Click on the labels and you will see the error/warning within the HTML content. HTML panel The HTML panel displays the full HTML generated by the conversion process. Error labels are added into the HTML in close proximity to the source of the error. Errors kept in Canvas If you check the Keep error labels option, the error labels will be included in the Canvas content.","title":"Keep error labels"},{"location":"reference/options/keep-error-labels/#keep-error-labels-in-canvas-content","text":"During the conversion process word2canvas will generate a number of errors and warnings. These identify possible issues with the conversion process that may require manual intervention. By default these labels are NOT included in the content added to Canvas. If turned on this option will include the error labels in the generated Canvas content. The purpose being to make it easier for you to identify what needs to be fixed.","title":"Keep error labels in Canvas content"},{"location":"reference/options/keep-error-labels/#check-html-stage-error-labels","text":"During the Check HTML stage word2canvas will generate warnings and errors about the conversion process. These are visible both in the Messages and HTML panels.","title":"Check HTML stage error labels"},{"location":"reference/options/keep-error-labels/#messages-panel","text":"For example, the following shows three warnings and three warnings. Click on the labels and you will see the error/warning within the HTML content.","title":"Messages panel"},{"location":"reference/options/keep-error-labels/#html-panel","text":"The HTML panel displays the full HTML generated by the conversion process. Error labels are added into the HTML in close proximity to the source of the error.","title":"HTML panel"},{"location":"reference/options/keep-error-labels/#errors-kept-in-canvas","text":"If you check the Keep error labels option, the error labels will be included in the Canvas content.","title":"Errors kept in Canvas"},{"location":"reference/warnings/canvasImages/","text":"Canvas (and Blackboard) Images Why? Blackboard Images and Canvas Images are a method for word2canvas to include images in a Canvas page where The image is located in the Canvas course's files area. But where only the name of the file is known (not the full URL as normally expected) This is used by the CAR process when a Blackboard page uses a Blackboard image of a Base 64 encoded image. i.e. types of images that can't be directly imported into Canvas. Info This workaround approach is required because Canvas doesn't support Base 64 encoded images in the HTML editor word2canvas isn't smart enough to translate base 64 encoded images into Canvas files. What it looks like? In the Word document In the Word document you will see some HTML code that is green in colour and has the Blackboard Image style applied. If you look closely, you will see that the src for the file is just a filename. e.g. the following word2canvas Check HTML stage During this stage, word2canvas will generate some warnings to identify the Blackboard/Canvas Images . This is necessary because at this stage you will not be able to see the images in the Canvas page. At this stage, word2canvas has not done any proocessing of the HTML (e.g. converting the filename into a full URL) You will see these warnings in both the Messages and HTML sections. Messages Messages will tell you the number of Canvas Images found HTML In the HTML section you will see small warning boxes indicating the specific Canvas Images . As you can see the image is broken - not showing. Since the URL for the image is just the filename. This will get fixed later in the process. word2canvas Complete stage In the final stage word2canvas will try to find the proper URL for the image filename. During this stage it will tell you whether it succeeded or not. See the \"possible problems\" section below for more detail on what might go wrong. The most common problem will be that the image file has not been loaded into the Canvas course's files area. In a Canvas page After word2canvas is complete, you can go to the newly created page and check that the image is showing. Possible problems The image filename does not match any file in the Canvas course' file area Suggesting that the filename has not been uploaded into the file area. The image filename matches more than one file in the Canvas course' file area. word2canvas searches for just the filename. The file area may have more than one file matching that name spread across different folders. How it is meant work \"Canvas Images\" are word2canvas' method for handling images from a Blackboard course that are hosted in the Blackboard content collection or Base 64 encoded images. It uses a two-step process: Conversion to span.blackboadImage The CAR process generates a Word document where such Blackboard images into a span.blackboardImage with the content collection URL converted into a filename. Conversion to Canvas: span.canvasImage and link to Canvas' file area By step 2, word2canvas will convert the span.blackboardImage into a span.canvasImage . At this stage, the image will likely be broken as it is using a bare filename. By step 4, word2canvas will find a matching filename in the course files area, generate a URL for the image, and update the span.canvasImage to use that URL","title":"Canvas Images"},{"location":"reference/warnings/canvasImages/#canvas-and-blackboard-images","text":"","title":"Canvas (and Blackboard) Images"},{"location":"reference/warnings/canvasImages/#why","text":"Blackboard Images and Canvas Images are a method for word2canvas to include images in a Canvas page where The image is located in the Canvas course's files area. But where only the name of the file is known (not the full URL as normally expected) This is used by the CAR process when a Blackboard page uses a Blackboard image of a Base 64 encoded image. i.e. types of images that can't be directly imported into Canvas. Info This workaround approach is required because Canvas doesn't support Base 64 encoded images in the HTML editor word2canvas isn't smart enough to translate base 64 encoded images into Canvas files.","title":"Why?"},{"location":"reference/warnings/canvasImages/#what-it-looks-like","text":"","title":"What it looks like?"},{"location":"reference/warnings/canvasImages/#in-the-word-document","text":"In the Word document you will see some HTML code that is green in colour and has the Blackboard Image style applied. If you look closely, you will see that the src for the file is just a filename. e.g. the following","title":"In the Word document"},{"location":"reference/warnings/canvasImages/#word2canvas-check-html-stage","text":"During this stage, word2canvas will generate some warnings to identify the Blackboard/Canvas Images . This is necessary because at this stage you will not be able to see the images in the Canvas page. At this stage, word2canvas has not done any proocessing of the HTML (e.g. converting the filename into a full URL) You will see these warnings in both the Messages and HTML sections.","title":"word2canvas Check HTML stage"},{"location":"reference/warnings/canvasImages/#messages","text":"Messages will tell you the number of Canvas Images found","title":"Messages"},{"location":"reference/warnings/canvasImages/#html","text":"In the HTML section you will see small warning boxes indicating the specific Canvas Images . As you can see the image is broken - not showing. Since the URL for the image is just the filename. This will get fixed later in the process.","title":"HTML"},{"location":"reference/warnings/canvasImages/#word2canvas-complete-stage","text":"In the final stage word2canvas will try to find the proper URL for the image filename. During this stage it will tell you whether it succeeded or not. See the \"possible problems\" section below for more detail on what might go wrong. The most common problem will be that the image file has not been loaded into the Canvas course's files area.","title":"word2canvas Complete stage"},{"location":"reference/warnings/canvasImages/#in-a-canvas-page","text":"After word2canvas is complete, you can go to the newly created page and check that the image is showing.","title":"In a Canvas page"},{"location":"reference/warnings/canvasImages/#possible-problems","text":"The image filename does not match any file in the Canvas course' file area Suggesting that the filename has not been uploaded into the file area. The image filename matches more than one file in the Canvas course' file area. word2canvas searches for just the filename. The file area may have more than one file matching that name spread across different folders.","title":"Possible problems"},{"location":"reference/warnings/canvasImages/#how-it-is-meant-work","text":"\"Canvas Images\" are word2canvas' method for handling images from a Blackboard course that are hosted in the Blackboard content collection or Base 64 encoded images. It uses a two-step process: Conversion to span.blackboadImage The CAR process generates a Word document where such Blackboard images into a span.blackboardImage with the content collection URL converted into a filename. Conversion to Canvas: span.canvasImage and link to Canvas' file area By step 2, word2canvas will convert the span.blackboardImage into a span.canvasImage . At this stage, the image will likely be broken as it is using a bare filename. By step 4, word2canvas will find a matching filename in the course files area, generate a URL for the image, and update the span.canvasImage to use that URL","title":"How it is meant work"},{"location":"reference/warnings/externalUrls/","text":"Problems with Canvas External URLs Background word2canvas supports the creation of an external URL as a module item . As the name suggests, the Canvas External URL item allows for an external web page to be displayed within the module item. The only information it accepts is the URL (aka link) for that external web page. How word2canvas does it? There is a Canvas External Url Word style (based on the Heading 1 Word style). The Canvas External URL style defines the title of the item. The content of the section following the \"heading\" should be just the URL. For example, the following image shows: Cric Info as the content for the Canvas External URL heading https://www.espncricinfo.com/ as the content of the section This will work. Common Problems There are two common problems when using this style No valid URL is provided; and, More than a valid URL is provided. Problem #2 is common when using a Word document produced by the CAR process. No valid URL is provided A Canvas External URL section must include a valid URL. The following image is an example of a Canvas External URL section without a valid URL (it's missing the https:// required at the start of a URL). Note: A valid URL means it meets the standard for a web link (starting with https or http). It does not mean that there is something at the URL. Solution Make sure the URL is a valid URL. Can you use it in a web browser to access a resource on the web? word2canvas will generate an error More than a valid URL is provided If the section after the Canvas External URL style contains a valid URL AND additional content. For example word2canvas will generate a \"Canvas External URL heading...contained more than just a URL\" error (e.g. the following image) Two possible solutions There are two possible solutions to this problem Remove the additional content. e.g. return the section to the just the URL as shown in the image at the top of this page. 2. Use a new Canvas Page and include the link with the additional content. The Canvas External URL item does not support additional content. A better fit is a Canvas Page with the link embeded into the content (not as the title). Change the style for the heading from Canvas External URL to Heading 1 and then insert the link into the content appropriate (e.g. the following)","title":"External URLs"},{"location":"reference/warnings/externalUrls/#problems-with-canvas-external-urls","text":"","title":"Problems with Canvas External URLs"},{"location":"reference/warnings/externalUrls/#background","text":"word2canvas supports the creation of an external URL as a module item . As the name suggests, the Canvas External URL item allows for an external web page to be displayed within the module item. The only information it accepts is the URL (aka link) for that external web page.","title":"Background"},{"location":"reference/warnings/externalUrls/#how-word2canvas-does-it","text":"There is a Canvas External Url Word style (based on the Heading 1 Word style). The Canvas External URL style defines the title of the item. The content of the section following the \"heading\" should be just the URL. For example, the following image shows: Cric Info as the content for the Canvas External URL heading https://www.espncricinfo.com/ as the content of the section This will work.","title":"How word2canvas does it?"},{"location":"reference/warnings/externalUrls/#common-problems","text":"There are two common problems when using this style No valid URL is provided; and, More than a valid URL is provided. Problem #2 is common when using a Word document produced by the CAR process.","title":"Common Problems"},{"location":"reference/warnings/externalUrls/#no-valid-url-is-provided","text":"A Canvas External URL section must include a valid URL. The following image is an example of a Canvas External URL section without a valid URL (it's missing the https:// required at the start of a URL). Note: A valid URL means it meets the standard for a web link (starting with https or http). It does not mean that there is something at the URL.","title":"No valid URL is provided"},{"location":"reference/warnings/externalUrls/#solution","text":"Make sure the URL is a valid URL. Can you use it in a web browser to access a resource on the web? word2canvas will generate an error","title":"Solution"},{"location":"reference/warnings/externalUrls/#more-than-a-valid-url-is-provided","text":"If the section after the Canvas External URL style contains a valid URL AND additional content. For example word2canvas will generate a \"Canvas External URL heading...contained more than just a URL\" error (e.g. the following image)","title":"More than a valid URL is provided"},{"location":"reference/warnings/externalUrls/#two-possible-solutions","text":"There are two possible solutions to this problem Remove the additional content. e.g. return the section to the just the URL as shown in the image at the top of this page. 2. Use a new Canvas Page and include the link with the additional content. The Canvas External URL item does not support additional content. A better fit is a Canvas Page with the link embeded into the content (not as the title). Change the style for the heading from Canvas External URL to Heading 1 and then insert the link into the content appropriate (e.g. the following)","title":"Two possible solutions"},{"location":"reference/warnings/failedWordStyles/","text":"Failed Word Styles Why? The Word documents generated by the CAR process seeks to apply specific Word styles to enable conversion. Sometimes this fails and this will impact the conversion. Some of the failed Word styles will leave artefacts indicating failure. A Failed Word Style error indicates that one of these artefacts has been detected. Example Word doc failed style For example, the following image shows a Word document where the Picture styles has failed. This is indicated by the text (Start of Picture) and (End of Picture) without any colouring. This is the most common failure, where an attempt was made by the CAR to apply the style within a table. Same example in Word2Canvas The following image shows word2canvas' attempt to convert the document above, including the Failed Word Style error. Note the difference between the failure and the successs.","title":"Failed Word style"},{"location":"reference/warnings/failedWordStyles/#failed-word-styles","text":"","title":"Failed Word Styles"},{"location":"reference/warnings/failedWordStyles/#why","text":"The Word documents generated by the CAR process seeks to apply specific Word styles to enable conversion. Sometimes this fails and this will impact the conversion. Some of the failed Word styles will leave artefacts indicating failure. A Failed Word Style error indicates that one of these artefacts has been detected.","title":"Why?"},{"location":"reference/warnings/failedWordStyles/#example-word-doc-failed-style","text":"For example, the following image shows a Word document where the Picture styles has failed. This is indicated by the text (Start of Picture) and (End of Picture) without any colouring. This is the most common failure, where an attempt was made by the CAR to apply the style within a table.","title":"Example Word doc failed style"},{"location":"reference/warnings/failedWordStyles/#same-example-in-word2canvas","text":"The following image shows word2canvas' attempt to convert the document above, including the Failed Word Style error. Note the difference between the failure and the successs.","title":"Same example in Word2Canvas"},{"location":"reference/warnings/htmlConversion/","text":"HTML Conversion Problems and Remedies Various issues can arise when converting Word documents to HTML. The first step in the word2canvas process. The following explains known issues and suggests possible remiedies. base64 Images Problem: Canvas doesn't support base64 encoded images in HTML When convering a Word document to HTML any images are currently converted to base64 encoded images The problem is that the Canvas Rich Content Editor will remove base64 encoded strings. Breaking the images. word2canvas will identify any base64 encoded images after conversion to HTML and insert placeholder images in the newly created module. Solution The solution is to manually save the base64 images to your computer and use the Canvas RCE to replace the word2canvas placeholder images with the saved images. Two steps: Save the images to your computer. One Check HTML tab of word2canvas you can view the base 64 encoded images. Right click on the image and select Save Image As to download a copy of the image. Replace the placeholder images. Once word2canvas has created the module, edit the pages with placeholder images and replace them with the appropriate saved image.","title":"HTML Conversion"},{"location":"reference/warnings/htmlConversion/#html-conversion-problems-and-remedies","text":"Various issues can arise when converting Word documents to HTML. The first step in the word2canvas process. The following explains known issues and suggests possible remiedies.","title":"HTML Conversion Problems and Remedies"},{"location":"reference/warnings/htmlConversion/#base64-images","text":"","title":"base64 Images"},{"location":"reference/warnings/htmlConversion/#problem-canvas-doesnt-support-base64-encoded-images-in-html","text":"When convering a Word document to HTML any images are currently converted to base64 encoded images The problem is that the Canvas Rich Content Editor will remove base64 encoded strings. Breaking the images. word2canvas will identify any base64 encoded images after conversion to HTML and insert placeholder images in the newly created module.","title":"Problem: Canvas doesn't support base64 encoded images in HTML"},{"location":"reference/warnings/htmlConversion/#solution","text":"The solution is to manually save the base64 images to your computer and use the Canvas RCE to replace the word2canvas placeholder images with the saved images. Two steps: Save the images to your computer. One Check HTML tab of word2canvas you can view the base 64 encoded images. Right click on the image and select Save Image As to download a copy of the image. Replace the placeholder images. Once word2canvas has created the module, edit the pages with placeholder images and replace them with the appropriate saved image.","title":"Solution"},{"location":"walk-throughs/blackboard-car/","text":"Migrating Blackboard content using the CAR Note The video (and the walk-through) demonstrated is accessible (and meaningful) for people working for Griffith University. Task Migrate content from a traditional Blackboard course to a Canvas Module. Starting with a Word document created by the CAR proces, (optionally) modified by you, and then migrated using word2canvas. Walk-through \"Chapter\" list # Title Description 1 Collections/objects/items Brief explanation of the model underpinning the CARs and migration ( see also ) 2 Here's one I prepared earlier Comparing the Blackboard content with an already completed migration to Canvas. Become familiar with what we'll produce 3 Looking at the CAR Word doc Examing the CAR Word doc, compare with the Blackboard content 4 Explaining Blackboard (aka Canvas ) Images Explain how the CAR and w2c are able to move images from Blackboard (and the Content Interface) to Canvas. 5 Starting with word2canvas Is it installed? What does it look like? How to start using it? 6 Four stages of word2canvas Overview of the four steps/stages of using word2canvas. 7 Starting the conversion and \"check html\" Choose a Word document and start the conversion. Description of what is shown at the Check HTML stage of word2canvas. 8 Check the module structure Explanation of what is seen at the Check Module stage of word2canvas. 9 Creating the module Explanation of what happend and what you see during the Create Module stage of word2canvas. 10 Examining the created module Tour and explanation of the module that was created. Description of the limitations of the initial conversion and demonstration of removing the module from Canvas. 11 Starting again - tidying up the Word document to fix limitations Example of editing the Word document to remove the issues and limitations from the first conversion. 12 Using word2canvas to create a Canvas Module with the revised document Demonstration of using word2canvas to create a Canvas Module with the revised Word document. 13 Explaining the \"H2s as accordions\" option Explanation of the \"H2s as accordions\" option. 14 Check module structure - version 2 Briefly observing the module structure of version 2 of the Word doc. 15 Creating version 2 of the module Explanation of the process of creating version 2 of the module. 16 Examining version 2 of the module Tour and explanation of the module that was created.","title":"2. CAR & Blackboard"},{"location":"walk-throughs/blackboard-car/#migrating-blackboard-content-using-the-car","text":"Note The video (and the walk-through) demonstrated is accessible (and meaningful) for people working for Griffith University.","title":"Migrating Blackboard content using the CAR"},{"location":"walk-throughs/blackboard-car/#task","text":"Migrate content from a traditional Blackboard course to a Canvas Module. Starting with a Word document created by the CAR proces, (optionally) modified by you, and then migrated using word2canvas.","title":"Task"},{"location":"walk-throughs/blackboard-car/#walk-through","text":"","title":"Walk-through"},{"location":"walk-throughs/blackboard-car/#chapter-list","text":"# Title Description 1 Collections/objects/items Brief explanation of the model underpinning the CARs and migration ( see also ) 2 Here's one I prepared earlier Comparing the Blackboard content with an already completed migration to Canvas. Become familiar with what we'll produce 3 Looking at the CAR Word doc Examing the CAR Word doc, compare with the Blackboard content 4 Explaining Blackboard (aka Canvas ) Images Explain how the CAR and w2c are able to move images from Blackboard (and the Content Interface) to Canvas. 5 Starting with word2canvas Is it installed? What does it look like? How to start using it? 6 Four stages of word2canvas Overview of the four steps/stages of using word2canvas. 7 Starting the conversion and \"check html\" Choose a Word document and start the conversion. Description of what is shown at the Check HTML stage of word2canvas. 8 Check the module structure Explanation of what is seen at the Check Module stage of word2canvas. 9 Creating the module Explanation of what happend and what you see during the Create Module stage of word2canvas. 10 Examining the created module Tour and explanation of the module that was created. Description of the limitations of the initial conversion and demonstration of removing the module from Canvas. 11 Starting again - tidying up the Word document to fix limitations Example of editing the Word document to remove the issues and limitations from the first conversion. 12 Using word2canvas to create a Canvas Module with the revised document Demonstration of using word2canvas to create a Canvas Module with the revised Word document. 13 Explaining the \"H2s as accordions\" option Explanation of the \"H2s as accordions\" option. 14 Check module structure - version 2 Briefly observing the module structure of version 2 of the Word doc. 15 Creating version 2 of the module Explanation of the process of creating version 2 of the module. 16 Examining version 2 of the module Tour and explanation of the module that was created.","title":"\"Chapter\" list"},{"location":"walk-throughs/ci-car/","text":"Migrating the Content Interface using the CAR Note The video (and the task) is only accessible (and meaningful) for people working for Griffith University. Task Migrate content from Blackboard which uses the Content Interface to Canvas. Starting with a Word document created by the CAR process, some (optional) modification, and then imported using word2canvas . Includes a demonstration of how the word2canvas error labels and placeholder style can be used in conjunction with the CAR Quality Assurance process. Video \"Chapter\" list # Title Description 1 Introducing the Content Interface Showing the Content Interface in Blackboard 2 What might it look like in Canvas? Showing a matching Canvas module 3 What it looks like in the CAR folder Explaining the folder and Word document created by the CAR from the Content Interface in Blackboard 4 Comparing CAR Word doc and Blackboard Showing the relationship between the Content Interface in Blackboard and the CAR Word document 5 Editing the Word doc Figuring what doesn't need to be migrated and removing it from the Word doc - pre word2canvas conversion 6 Content Interface images as Canvas/Blackboard images Explanation of how the CAR handles images in the Content Interface and what works with word2canvas 7 Starting the word2canvas conversion Using word2canvas to check our changes 8 Unexpected problem with HTML - how to fix it Fixing a problem with the original HTML (which wasn't evident in Blackboard) 9 Adding in the accordions Turning on the H2s as accordions option 10 Understanding word2canvas messages about Content Interface images Explain the messages word2canvas shows re: Canvas images 11 How to deal with Blackboard links? One way to handle Blackboard links that are left in the Word doc 12 Keeping the w2c errors as placeholders How and why to leave the w2c errors in Canvas 13 Adding additional placeholder messages Use of the placeholder style in Word to link with the QA process 14 Adding in a Canvas discussion forum How to modify the Word document to add a (existing) Canvas discussion to the module 15 Restarting word2canvas with modified Word doc Second use of word2canvas to check the Word doc 16 Setting the word2canvas options and checking the module structure Set the check html options and proceed 17 Create the module Quick check 18 Examining the new module Stepping through the newly created module 19 Placeholders and the Quality Assurance page Show the connection between placeholders in Canvas and the quality assurance page 20 Checking the rest of the module Examining the rest of the module","title":"3. CAR & Content Interface"},{"location":"walk-throughs/ci-car/#migrating-the-content-interface-using-the-car","text":"Note The video (and the task) is only accessible (and meaningful) for people working for Griffith University.","title":"Migrating the Content Interface using the CAR"},{"location":"walk-throughs/ci-car/#task","text":"Migrate content from Blackboard which uses the Content Interface to Canvas. Starting with a Word document created by the CAR process, some (optional) modification, and then imported using word2canvas . Includes a demonstration of how the word2canvas error labels and placeholder style can be used in conjunction with the CAR Quality Assurance process.","title":"Task"},{"location":"walk-throughs/ci-car/#video","text":"","title":"Video"},{"location":"walk-throughs/ci-car/#chapter-list","text":"# Title Description 1 Introducing the Content Interface Showing the Content Interface in Blackboard 2 What might it look like in Canvas? Showing a matching Canvas module 3 What it looks like in the CAR folder Explaining the folder and Word document created by the CAR from the Content Interface in Blackboard 4 Comparing CAR Word doc and Blackboard Showing the relationship between the Content Interface in Blackboard and the CAR Word document 5 Editing the Word doc Figuring what doesn't need to be migrated and removing it from the Word doc - pre word2canvas conversion 6 Content Interface images as Canvas/Blackboard images Explanation of how the CAR handles images in the Content Interface and what works with word2canvas 7 Starting the word2canvas conversion Using word2canvas to check our changes 8 Unexpected problem with HTML - how to fix it Fixing a problem with the original HTML (which wasn't evident in Blackboard) 9 Adding in the accordions Turning on the H2s as accordions option 10 Understanding word2canvas messages about Content Interface images Explain the messages word2canvas shows re: Canvas images 11 How to deal with Blackboard links? One way to handle Blackboard links that are left in the Word doc 12 Keeping the w2c errors as placeholders How and why to leave the w2c errors in Canvas 13 Adding additional placeholder messages Use of the placeholder style in Word to link with the QA process 14 Adding in a Canvas discussion forum How to modify the Word document to add a (existing) Canvas discussion to the module 15 Restarting word2canvas with modified Word doc Second use of word2canvas to check the Word doc 16 Setting the word2canvas options and checking the module structure Set the check html options and proceed 17 Create the module Quick check 18 Examining the new module Stepping through the newly created module 19 Placeholders and the Quality Assurance page Show the connection between placeholders in Canvas and the quality assurance page 20 Checking the rest of the module Examining the rest of the module","title":"\"Chapter\" list"},{"location":"walk-throughs/create-a-module/","text":"Create a module Task Use `word2canvas to create a Canvas module using the sample Word document . Pre-requisites Created a Word document with the content you require (e.g. the sample document) and wish to convert it to a Canvas module. Installed and test word2canvas Process Use these 5 steps to create a module with word2canvas Go to the modules page of your Canvas course site Choose your Word document Check the HTML conversion Check (and eventually configure) the Canvas module Create the module 1. Go to the modules page of your Canvas course site word2canvas creates a module in your Canvas course site. word2canvas is only available from module page of your Canvas course site. With word2canvas installed the modules page should include the .docx 2 + Module button in the top right hand corner - circled in red in the following image. This is the button to start using word2canvas . 2. Choose your Word document Clicking on the word2canvas button will add the word2canvas dialog to the page ready for you to browser for the Word document on your computer. As soon as you select the Word document word2canvas will upload, attempt to convert it to HTML and move onto the next stage. 3. Check the HTML conversion After the HTML conversion is complete word2canvas will display the results in the form of messages, and A collection or warnings and errors detected during the conversion. HTML The contents of the Word document converted into HTML. You can use this information to double check the conversion of your Word document. If there are issues you modify the Word document and try again. Assuming you are happy with the HTML conversion of your Word document you hit the Check module structure to move onto the next stage. 4. Check (and eventually configure) the Canvas module In this stage word2canvas presents a representation of the Canvas module that will be created (it's not been created yet). This is an opportunity for you to check if the structure meets your intent. If the structure doesn't meet your intent, then you will need to modify your Word document and start again. If all is good hit the Create module button to move onto the next stage - the actual creation of the Canvas module. Coming soon The current plan is that this stage will eventually allow you to configure aspects of the Canvas module. For example, indenting items and perhaps configuring completion requirements. 5. Create the module As you enter stage 5 word2canvas interacts with Canvas to create the new module, this includes: Creating the new module. Looping through each item in the module and either creating a new item or finding an existing item (depending on the Word document and styles) Updating any Canvas File Link or Canvas Image styles. These styles use names of files hosted in the Canvas files area. In this stage, word2canvas attempts to replace the names of the files with correct Canvas links. word2canvas generates a list of messages as it completes this process to report progress and any errors as they occur. The most common errors are generated when word2canvas is unable to find Canvas items or files it expects to already exist. For example, the sample Word document attempts to link to a number of files, assignments, images, and discussion topics that don't exist in the sample course. If there are errors you can either manually modify the created module using the Canvas interface, or you can remove the module and its items and start again by modifying your Word document. If you are happy with the module, you can close word2canvas by clicking the \"close\" button.","title":"Create a module"},{"location":"walk-throughs/create-a-module/#create-a-module","text":"","title":"Create a module"},{"location":"walk-throughs/create-a-module/#task","text":"Use `word2canvas to create a Canvas module using the sample Word document .","title":"Task"},{"location":"walk-throughs/create-a-module/#pre-requisites","text":"Created a Word document with the content you require (e.g. the sample document) and wish to convert it to a Canvas module. Installed and test word2canvas","title":"Pre-requisites"},{"location":"walk-throughs/create-a-module/#process","text":"Use these 5 steps to create a module with word2canvas Go to the modules page of your Canvas course site Choose your Word document Check the HTML conversion Check (and eventually configure) the Canvas module Create the module","title":"Process"},{"location":"walk-throughs/create-a-module/#1-go-to-the-modules-page-of-your-canvas-course-site","text":"word2canvas creates a module in your Canvas course site. word2canvas is only available from module page of your Canvas course site. With word2canvas installed the modules page should include the .docx 2 + Module button in the top right hand corner - circled in red in the following image. This is the button to start using word2canvas .","title":"1. Go to the modules page of your Canvas course site"},{"location":"walk-throughs/create-a-module/#2-choose-your-word-document","text":"Clicking on the word2canvas button will add the word2canvas dialog to the page ready for you to browser for the Word document on your computer. As soon as you select the Word document word2canvas will upload, attempt to convert it to HTML and move onto the next stage.","title":"2. Choose your Word document"},{"location":"walk-throughs/create-a-module/#3-check-the-html-conversion","text":"After the HTML conversion is complete word2canvas will display the results in the form of messages, and A collection or warnings and errors detected during the conversion. HTML The contents of the Word document converted into HTML. You can use this information to double check the conversion of your Word document. If there are issues you modify the Word document and try again. Assuming you are happy with the HTML conversion of your Word document you hit the Check module structure to move onto the next stage.","title":"3. Check the HTML conversion"},{"location":"walk-throughs/create-a-module/#4-check-and-eventually-configure-the-canvas-module","text":"In this stage word2canvas presents a representation of the Canvas module that will be created (it's not been created yet). This is an opportunity for you to check if the structure meets your intent. If the structure doesn't meet your intent, then you will need to modify your Word document and start again. If all is good hit the Create module button to move onto the next stage - the actual creation of the Canvas module. Coming soon The current plan is that this stage will eventually allow you to configure aspects of the Canvas module. For example, indenting items and perhaps configuring completion requirements.","title":"4. Check (and eventually configure) the Canvas module"},{"location":"walk-throughs/create-a-module/#5-create-the-module","text":"As you enter stage 5 word2canvas interacts with Canvas to create the new module, this includes: Creating the new module. Looping through each item in the module and either creating a new item or finding an existing item (depending on the Word document and styles) Updating any Canvas File Link or Canvas Image styles. These styles use names of files hosted in the Canvas files area. In this stage, word2canvas attempts to replace the names of the files with correct Canvas links. word2canvas generates a list of messages as it completes this process to report progress and any errors as they occur. The most common errors are generated when word2canvas is unable to find Canvas items or files it expects to already exist. For example, the sample Word document attempts to link to a number of files, assignments, images, and discussion topics that don't exist in the sample course. If there are errors you can either manually modify the created module using the Canvas interface, or you can remove the module and its items and start again by modifying your Word document. If you are happy with the module, you can close word2canvas by clicking the \"close\" button.","title":"5. Create the module"},{"location":"walk-throughs/html-check/","text":"Checking and fixing HTML conversion outcomes Background The first step in word2canvas is converting your Word document to HTML. To achieve this, word2canvas uses the Mammoth .docx to HTML converter ; and, a custom style map . After attempting to convert your Word document, word2canvas will display both the Messages and the HTML generated by Mammoth. These are displayed in accordions which can be opened/closed to check the outcomes of the conversion and inform how to fix any issues. Checking the conversion outcomes The following image shows the conversion outcomes of the sample w2c.docx file . The two most common types of checks are Do the Messages include anything of concern? Are there any problems with the generated HTML ? Check the Messages Mammoth messages follow a common format , typically including a type and a message . The type with be either a warning or a error . Warnings tend to mean the conversion happened, but perhaps with unexpected results. As illustrated above the most common warning indicates that the document includes a Word style that is not recognised by Mammoth. Handling unrecognised Word styles There are three ways you can handle a Word style unrecognised by Mammoth Ignore it - generally the text will still appear in the HTML. However, it may have lost some of the intended styling. Remove the style from the Word document - you can search Word documents for specific styles and then choose to apply a different style or to remove the style entirely Add the style to the word2canvas custom map - the custom map is in the word converter model . If you're not comfortable coding, you can request an update of the custom style map via the word2canvas Issues . Handling problems with the generated HTML If the generated HTML does not meet your expectations, the only real solution is to modify the Word document (e.g. change the style used, modify an image etc) and test the conversion again.","title":"HTML Check"},{"location":"walk-throughs/html-check/#checking-and-fixing-html-conversion-outcomes","text":"","title":"Checking and fixing HTML conversion outcomes"},{"location":"walk-throughs/html-check/#background","text":"The first step in word2canvas is converting your Word document to HTML. To achieve this, word2canvas uses the Mammoth .docx to HTML converter ; and, a custom style map . After attempting to convert your Word document, word2canvas will display both the Messages and the HTML generated by Mammoth. These are displayed in accordions which can be opened/closed to check the outcomes of the conversion and inform how to fix any issues.","title":"Background"},{"location":"walk-throughs/html-check/#checking-the-conversion-outcomes","text":"The following image shows the conversion outcomes of the sample w2c.docx file . The two most common types of checks are Do the Messages include anything of concern? Are there any problems with the generated HTML ?","title":"Checking the conversion outcomes"},{"location":"walk-throughs/html-check/#check-the-messages","text":"Mammoth messages follow a common format , typically including a type and a message . The type with be either a warning or a error . Warnings tend to mean the conversion happened, but perhaps with unexpected results. As illustrated above the most common warning indicates that the document includes a Word style that is not recognised by Mammoth.","title":"Check the Messages"},{"location":"walk-throughs/html-check/#handling-unrecognised-word-styles","text":"There are three ways you can handle a Word style unrecognised by Mammoth Ignore it - generally the text will still appear in the HTML. However, it may have lost some of the intended styling. Remove the style from the Word document - you can search Word documents for specific styles and then choose to apply a different style or to remove the style entirely Add the style to the word2canvas custom map - the custom map is in the word converter model . If you're not comfortable coding, you can request an update of the custom style map via the word2canvas Issues .","title":"Handling unrecognised Word styles"},{"location":"walk-throughs/html-check/#handling-problems-with-the-generated-html","text":"If the generated HTML does not meet your expectations, the only real solution is to modify the Word document (e.g. change the style used, modify an image etc) and test the conversion again.","title":"Handling problems with the generated HTML"},{"location":"walk-throughs/using-the-sample/","text":"Using the Sample Document Task Use word2canvas to create a Canvas Module using the sample w2c Word document . Walk-through \"Chapter\" list Use the chapter list to skip directly to specific stages in the walk-through. # Title Description 1 What will the end result look like Examine the Canvas module that will be produced by using word2canvas with the sample document 2 Comparing the Word doc and the module Examine the similarities 3 Pre-requsites for using word2canvas Brief explanation of what you'll need to use word2canvas 4 Pre-requsites for convering the sample Word doc What you'll need to completely convert the sample Word doc 5 Four stages of word2canvas Overview of the four stages of using word2canvas 6 Start the conversion: Stage 1 Choose the Word doc to start the conversion 7 Stage 2: Check HTML Check the HTML version of the Word document 8 Stage 2: Check the messages Check the word2canvas messages generated during stage 2 9 The Heading 2 as accordions option Explanation of the h2 as accordions option in the Check HTML stagel 10 Stage 3: Check module structure Check the draft Canvas module structure 11 Stage 4: Create the module Explanation of the process of creating the module 12 Examining the new module Step through the newly created module 13 Images, working and not Discussion of 'canvas' and 'base64' images","title":"1. Sample document"},{"location":"walk-throughs/using-the-sample/#using-the-sample-document","text":"","title":"Using the Sample Document"},{"location":"walk-throughs/using-the-sample/#task","text":"Use word2canvas to create a Canvas Module using the sample w2c Word document .","title":"Task"},{"location":"walk-throughs/using-the-sample/#walk-through","text":"","title":"Walk-through"},{"location":"walk-throughs/using-the-sample/#chapter-list","text":"Use the chapter list to skip directly to specific stages in the walk-through. # Title Description 1 What will the end result look like Examine the Canvas module that will be produced by using word2canvas with the sample document 2 Comparing the Word doc and the module Examine the similarities 3 Pre-requsites for using word2canvas Brief explanation of what you'll need to use word2canvas 4 Pre-requsites for convering the sample Word doc What you'll need to completely convert the sample Word doc 5 Four stages of word2canvas Overview of the four stages of using word2canvas 6 Start the conversion: Stage 1 Choose the Word doc to start the conversion 7 Stage 2: Check HTML Check the HTML version of the Word document 8 Stage 2: Check the messages Check the word2canvas messages generated during stage 2 9 The Heading 2 as accordions option Explanation of the h2 as accordions option in the Check HTML stagel 10 Stage 3: Check module structure Check the draft Canvas module structure 11 Stage 4: Create the module Explanation of the process of creating the module 12 Examining the new module Step through the newly created module 13 Images, working and not Discussion of 'canvas' and 'base64' images","title":"\"Chapter\" list"},{"location":"walk-throughs/walk-throughs/","text":"Walk-throughs Walk-throughs step through common tasks demonstrating the use of word2canvas . Available walk-throughs are: Creating a module Page stepping through the 5 step process of using word2canvas . Checking and fixing HTML conversion outcomes Incomplete examiniation of diagnosing common HTML version outcomes. There are also a collection of video walk-throughs, including: Using the sample Word document Using the CAR for traditional Blackboard content Using the CAR for Content Interface content Other walk-throughs include: Note The last two walk-throughs are only relevant to people working at Griffith University.","title":"Walk-throughs"},{"location":"walk-throughs/walk-throughs/#walk-throughs","text":"Walk-throughs step through common tasks demonstrating the use of word2canvas . Available walk-throughs are: Creating a module Page stepping through the 5 step process of using word2canvas . Checking and fixing HTML conversion outcomes Incomplete examiniation of diagnosing common HTML version outcomes. There are also a collection of video walk-throughs, including: Using the sample Word document Using the CAR for traditional Blackboard content Using the CAR for Content Interface content Other walk-throughs include: Note The last two walk-throughs are only relevant to people working at Griffith University.","title":"Walk-throughs"}]}