
import { c2m_View } from './c2m_View.js';
import { c2m_ModuleView} from './canvas/c2m_ModuleView.js';


const CHECK_MODULE_HTML = `
<h3>Create new module from Word document</h3>

<p color="secondary">Step 3 of 4: Check Canvas Module conversion</p>

<div id="c2m_choice">
  <button id="c2m-btn-confirm" class="btn-success">Confirm</button>
  <button id="c2m-btn-start-again" class="btn-danger">Start again</button>
  <button id="c2m-btn-close" class="btn-primary">Close</button>
</div>

<h4>HTML to Canvas Module conversion completed</h4>

  <div id="c2m_summary">
  <p>Use the following to check the conversion. If ok, 
  click <em>Confirm</em> to see the Canvas Module this HTML would become.</p>
  </div>


<button class="c2m_accordion" id="c2m_result">Messages - generated during conversion</button>
<div class="c2m_panel">
  <div id="c2m_messages"></div>
</div>

<button class="c2m_accordion">Module structure - generated by conversion</button>
<div class="c2m_panel" id="c2m_module"></div>
</div>

<style>
.c2m-received-results {
	margin-top: 0.5em;
}

/* Style the buttons that are used to open and close the accordion panel */
.c2m_accordion {
  background-color: #eee;
  color: #444;
  cursor: pointer;
  font-weight: bold;
  padding: 0.5em;
  width: 100%;
  text-align: left;
  border: none;
  outline: none;
  transition: 0.4s;
}

/* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */
.c2m_active, .c2m_accordion:hover {
  background-color: #ccc;
}

/* Style the accordion panel. Note: hidden by default */
.c2m_panel {
  padding: 0 18px;
  background-color: white;
  display: none;
  overflow: hidden;
}

.c2m_accordion:after {
  content: '+'; /* Unicode character for "plus" sign (+) */
  font-size: 13px;
  color: #777;
  float: right;
  margin-left: 5px;
}

.c2m_active:after {
  content: "-"; /* Unicode character for "minus" sign (-) */
}
</style>
`;


export default class c2m_CheckModuleView extends c2m_View {


	constructor(model, controller) {
		super(model,controller);
	}

	render() {
		console.log("3. Check the Canvas Module");

		// perform the test conversion of the HTML (Mammoth) to Canvas Module
		this.model.testHtmlToModule();

		let c2mDiv = this.createEmptyDialogDiv();
		// insert the new stage html
		c2mDiv.insertAdjacentHTML('afterbegin', CHECK_MODULE_HTML);

		// insert it before div.item-group-container
		let itemGroupContainer = document.querySelector("div.item-group-container");
		itemGroupContainer.parentNode.insertBefore(c2mDiv, itemGroupContainer);

		// add event handlers
		let closeButton = document.getElementById("c2m-btn-close");
		closeButton.onclick = () => this.controller.handleClick(c2m_Initialised);

		let startAgainButton = document.getElementById("c2m-btn-start-again");
		startAgainButton.onclick = () => this.controller.handleClick(c2m_ChooseWord);

		let confirmButton = document.getElementById("c2m-btn-confirm");
		confirmButton.onclick = () => this.controller.handleClick(c2m_Completed);

		// check to see if conversion results are in
		// does the model have a htmlConvert property
		if (
			Object.prototype.hasOwnProperty.call(this.model, "htmlConverter") &&
			this.model.htmlConverter.moduleItems.length > 0
			) { 
				// if so, show the results 
				this.renderConversionResults(); 
			}
	}

	/**
	 * Conversion to a module has been completed
	 * - set the messages area
	 * - create the Canvas module view
	 */
	renderConversionResults() {

		// TODO update the div with the results
		// handle any error messages
		const converter = this.model.htmlConverter;

		this.configureAccordions();
		// Show the converted html
		// update div#c2m_html with the result html
		let c2m_html = document.getElementById("c2m_module");
		if (c2m_html) {

			let moduleView = new c2m_ModuleView(converter);
			// TODO need to call a module view
			c2m_html.innerHTML = moduleView.renderString();
		
		}

		// Show the messages from mammoth
		let c2m_messages = document.getElementById("c2m_messages");
		if (c2m_messages) {
			//let messageHtml = this.generateMessageHtml(this.model.wordConverter.mammothResult.messages);
			c2m_messages.innerHTML = 'no messages yet';
		}
	}

}